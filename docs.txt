#main.cpp:main: The main entry point of the kernel
#gdt.cpp:setup_gdt: Loads the Global Descriptor Table
#output.cpp:output_device::putstring: Prints a string to the output device
#output.cpp:output_device::putchar: Prints a character to the output device
#serial_port.cpp:serial_port::putstring: Prints a string to the serial port
#serial_port.cpp:serial_port::putchar: Prints a character to the serial port
#serial_port.cpp:serial_port::is_transmit_empty: Checks if the serial port is ready to transmit
#serial_port.cpp:serial_port::serial_port: Constructor for the serial port class
#sys_memory.cpp:syscall::sys_memory_free: Syscall to free a block of memory
#sys_memory.cpp:syscall::sys_memory_alloc: Syscall to allocate a block of memory
#sys_write.cpp:syscall::sys_write: Syscall to write to an file descriptor
#sys_socket_disconnect.cpp:syscall::sys_socket_disconnect: Syscall to disconnect a socket
#sys_mkdir.cpp:syscall::sys_mkdir: Syscall to create a directory
#sys_time.cpp:syscall::sys_time: Syscall to get the current unix time
#sys_memory_info.cpp:syscall::sys_memory_info: Syscall to get the memory information
#sys_sound_push_note.cpp:syscall::sys_sound_push_note: Syscall to push a note to the sound device queue
#syscall_handler.asm:syscall_interrupt_stub: The syscall interrupt stub
#sys_socket_recv.cpp:syscall::sys_socket_recv: Syscall to receive data from a socket
#sys_delete_dir.cpp:syscall::sys_delete_dir: Syscall to delete a directory
#sys_socket_send.cpp:syscall::sys_socket_send: Syscall to send data to a socket
#sys_ipc_send_message.cpp:syscall::sys_ipc_send_message: Syscall to send a message to an ipc handler
#sys_env.cpp:syscall::sys_env: Syscall to get the either process specific or global environment
#sys_socket_connect.cpp:syscall::sys_socket_connect: Syscall to connect to a socket
#sys_mouse_get_buttons.cpp:syscall::sys_mouse_get_buttons: Syscall to get the mouse buttons state
#sys_thread.cpp:syscall::sys_thread: Syscall to create a thread
#sys_get_file_size.cpp:syscall::sys_get_file_size: Syscall to get the size of a file
#sys_ipc_get_hid.cpp:syscall::sys_ipc_get_hid: Syscall to get the handler id of an ipc handler
#sys_exit.cpp:syscall::sys_exit: Syscall to exit the current process
#sys_sound_sync.cpp:syscall::sys_sound_sync: Syscall to wait for the sound device to finish playing the queue
#sys_touch.cpp:syscall::sys_touch: Syscall to create a new file
#sys_open.cpp:syscall::sys_open: Syscall to open a file
#sys_read.cpp:syscall::sys_read: Syscall to read from a file
#sys_delete.cpp:syscall::sys_delete: Syscall to delete a file
#sys_close.cpp:syscall::sys_close: Syscall to close a file
#sys_ipc_register.cpp:syscall::sys_ipc_register: Syscall to register an ipc handler
#sys_dns_resolve.cpp:syscall::sys_dns_resolve: Syscall to resolve a hostname to an ip address
#sys_mouse_get_pos.cpp:syscall::sys_mouse_get_pos: Syscall to get the mouse position
#sys_fs_at.cpp:syscall::sys_fs_at: Syscall to get the mounted filesystem
#syscall.cpp:syscall::setup: Sets up the syscall table
#syscall.cpp:test_syscall: Test syscall
#syscall.cpp:syscall::get_id_syscall: Syscall to get the id of an syscall
#sys_spawn.cpp:syscall::sys_spawn: Syscall to spawn a new process
#sys_mouse_reset.cpp:syscall::sys_mouse_reset: Syscall to reset the mouse
#sys_dir_at.cpp:syscall::sys_dir_at: Syscall to get the contents of a directory
#sys_ipc_unregister.cpp:syscall::sys_ipc_unregister: Syscall to unregister an ipc handler
#sys_sound_get_channel_count.cpp:syscall::sys_sound_get_channel_count: Syscall to get the number of sound channels available
#sys_delay.cpp:syscall::sys_delay: Syscall to delay the current process
#sys_icmp_echo_request.cpp:syscall::sys_icmp_echo_request: Syscall to send an icmp echo request
#sys_insmod.cpp:syscall::sys_insmod: Syscall to load a kernel module
#argparse.cpp:setup_global_argparser: Sets up the global argparser
#argparse.cpp:argparser::get_arg: Gets an argument from the argparser
#argparse.cpp:argparser::is_arg: Checks if an argument is present in the argparser
#argparse.cpp:argparser::argparser: Constructor for the argparser class
#vsprintf.cpp:vsprintf: Prints a formatted string to a buffer
#vsprintf.cpp:print_num: Prints a number to a buffer
#lock.asm:atomic_spinlock: Waits for a spinlock to be unlocked
#lock.asm:atomic_unlock: Unlocks a spinlock
#lock.asm:atomic_lock: Locks a spinlock
#mmio.cpp:MMIO::write64: Writes a 64 bit value to a mmio register
#mmio.cpp:MMIO::write32: Writes a 32 bit value to a mmio register
#mmio.cpp:MMIO::write16: Writes a 16 bit value to a mmio register
#mmio.cpp:MMIO::write8: Writes a 8 bit value to a mmio register
#mmio.cpp:MMIO::read64: Reads a 64 bit value from a mmio register
#mmio.cpp:MMIO::read32: Reads a 32 bit value from a mmio register
#mmio.cpp:MMIO::read16: Reads a 16 bit value from a mmio register
#mmio.cpp:MMIO::read8: Reads a 8 bit value from a mmio register
#assert.cpp:__assert_fail: If an assertion fails, this function is called
#port.cpp:outl: Writes a 32 bit value to a port
#port.cpp:inl: Reads a 32 bit value from a port
#port.cpp:outw: Writes a 16 bit value to a port
#port.cpp:inw: Reads a 16 bit value from a port
#port.cpp:outb: Writes a 8 bit value to a port
#port.cpp:inb: Reads a 8 bit value from a port
#port.cpp:io_wait: Waits for a port to be ready
#port.cpp:Port32Bit::Write: Writes a 32 bit value to a port
#port.cpp:Port32Bit::Read: Reads a 32 bit value from a port
#port.cpp:Port32Bit::~Port32Bit: Destructor for the class
#port.cpp:Port32Bit::Port32Bit: Constructor for the class
#port.cpp:Port16Bit::Write: Writes a 16 bit value to a port
#port.cpp:Port16Bit::Read: Reads a 16 bit value from a port
#port.cpp:Port16Bit::~Port16Bit: Destructor for the class
#port.cpp:Port16Bit::Port16Bit: Constructor for the class
#port.cpp:Port8Bit::Write: Writes a 8 bit value to a port
#port.cpp:Port8Bit::Read: Reads a 8 bit value from a port
#port.cpp:Port8Bit::~Port8Bit: Destructor for the class
#port.cpp:Port8Bit::Port8Bit: Constructor for the class
#abort.cpp:abortf: Causes a kernel panic
#string.cpp:strcmp: Compares two strings
#string.cpp:memcmp: Compares two memory regions
#string.cpp:memset: Sets a memory region to a value
#string.cpp:memcpy: Copies a memory region
#string.cpp:sprintf: Prints a formatted string to a buffer
#string.cpp:strcat: Concatenates two strings
#string.cpp:strchr: Searches for a character in a string
#string.cpp:strnlen: Gets the length of a string
#string.cpp:strlen: Gets the length of a string
#string.cpp:strcpy: Copies a string
#log.cpp:printf: Prints a formatted string to the screen
#log.cpp:debugf_intrnl: Internal function used for debugf
#fxsr.asm:fxrstor_if_supported: Restores the fpu state if it is supported
#fxsr.asm:fxsave_if_supported: Saves the fpu state if it is supported
#unix_time.cpp:from_unix_time: Converts unix time to a struct
#unix_time.cpp:to_unix_time: Converts a struct to unix time
#ipc.cpp:ipc::init: Initializes the ipc system
#ipc.cpp:ipc_manager::send_message: Sends a message to a process
#ipc.cpp:ipc_manager::get_hid: Gets the handler id of an ipc handler
#ipc.cpp:ipc_manager::unregister_callback: Unregisters an ipc handler
#ipc.cpp:ipc_manager::register_callback: Registers an ipc handler
#ipc.cpp:ipc_manager::ipc_manager: Constructor for the ipc manager class
#cstr.cpp:num_to_string: Converts a number to a string
#elf_loader.cpp:elf::load_elf: Loads an elf file
#elf_loader.cpp:elf_apply_relocations: Applies relocations to an elf file
#elf_resolver.cpp:elf::resolve_symbol: Resolves a symbol in the kernel and the loaded modules
#elf_resolver.cpp:elf::setup: Sets up the elf resolver system
#elf_resolver.cpp:elf_symbol_resolver::resolve: Resolves a symbol in an elf file
#elf_resolver.cpp:elf_symbol_resolver::elf_symbol_resolver: Constructor for the elf symbol resolver class
#kernel_module.cpp:elf::fs_init_all: Calls the fs_init function for all modules
#kernel_module.cpp:elf::device_init_all: Calls the device_init function for all modules
#kernel_module.cpp:elf::load_kernel_module: Loads a kernel module
#kernel_module.cpp:kernel_module_render_status: Renders the status of loading process of a kernel module
#function_patch.cpp:unpatch: Unpatches a function
#function_patch.cpp:elf::patch: Patches a function
#boot_screen_renderer.cpp:boot_screen_renderer::handle: Handles the timer interrupt for the boot screen renderer
#boot_screen_renderer.cpp:boot_screen_renderer::set_progress: Sets the progress of the boot screen progress bar
#boot_screen_renderer.cpp:boot_screen_renderer::putstring: Does nothing
#boot_screen_renderer.cpp:boot_screen_renderer::putchar: Does nothing
#boot_screen_renderer.cpp:boot_screen_renderer::~boot_screen_renderer: Destructor for the class
#boot_screen_renderer.cpp:boot_screen_renderer::boot_screen_renderer: Constructor for the class
#font_renderer.cpp:font_renderer::write: Handler for the font_renderer dev fs file
#font_renderer.cpp:font_renderer::get_name: Gets the name of the dev fs file
#font_renderer.cpp:font_renderer::reset_color: Resets the color of the font renderer
#font_renderer.cpp:font_renderer::set_color: Sets the color of the font renderer
#font_renderer.cpp:font_renderer::clear_line: Clears the current line
#font_renderer.cpp:font_renderer::clear: Clears the screen
#font_renderer.cpp:font_renderer::putstring: Writes a string to the screen
#font_renderer.cpp:font_renderer::putchar: Writes a character to the screen
#font_renderer.cpp:font_renderer::font_renderer: Constructor for the class