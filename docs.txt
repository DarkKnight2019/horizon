#core_main.cpp:main: The main entry point of the kernel
#core_gdt.cpp:setup_gdt: Loads the Global Descriptor Table
#core_output_output.cpp:output_device::putstring: Prints a string to the output device
#core_output_output.cpp:output_device::putchar: Prints a character to the output device
#core_output_serial_port.cpp:serial_port::putstring: Prints a string to the serial port
#core_output_serial_port.cpp:serial_port::putchar: Prints a character to the serial port
#core_output_serial_port.cpp:serial_port::is_transmit_empty: Checks if the serial port is ready to transmit
#core_output_serial_port.cpp:serial_port::serial_port: Constructor for the serial port class
#core_syscall_sys_memory.cpp:syscall::sys_memory_free: Syscall to free a block of memory
#core_syscall_sys_memory.cpp:syscall::sys_memory_alloc: Syscall to allocate a block of memory
#core_syscall_sys_write.cpp:syscall::sys_write: Syscall to write to an file descriptor
#core_syscall_sys_socket_disconnect.cpp:syscall::sys_socket_disconnect: Syscall to disconnect a socket
#core_syscall_sys_mkdir.cpp:syscall::sys_mkdir: Syscall to create a directory
#core_core_syscall_sys_time.cpp:syscall::sys_time: Syscall to get the current unix time
#core_syscall_sys_clock.cpp:syscall::sys_clock: Syscall to get the current number of timer ticks since boot
#core_syscall_sys_clock.cpp:syscall::sys_clock_ticks_per_second: Syscall to get the number of timer ticks per second
#core_syscall_sys_memory_info.cpp:syscall::sys_memory_info: Syscall to get the memory information
#core_syscall_sys_sound_push_note.cpp:syscall::sys_sound_push_note: Syscall to push a note to the sound device queue
#core_syscall_syscall_handler.asm:syscall_interrupt_stub: The syscall interrupt stub
#core_syscall_sys_socket_recv.cpp:syscall::sys_socket_recv: Syscall to receive data from a socket
#core_syscall_sys_delete_dir.cpp:syscall::sys_delete_dir: Syscall to delete a directory
#core_syscall_sys_socket_send.cpp:syscall::sys_socket_send: Syscall to send data to a socket
#core_syscall_sys_ipc_send_message.cpp:syscall::sys_ipc_send_message: Syscall to send a message to an ipc handler
#core_syscall_sys_env.cpp:syscall::sys_env: Syscall to get the either process specific or global environment
#core_syscall_sys_socket_connect.cpp:syscall::sys_socket_connect: Syscall to connect to a socket
#core_syscall_sys_mouse_get_buttons.cpp:syscall::sys_mouse_get_buttons: Syscall to get the mouse buttons state
#core_syscall_sys_thread.cpp:syscall::sys_thread: Syscall to create a thread
#core_syscall_sys_get_file_size.cpp:syscall::sys_get_file_size: Syscall to get the size of a file
#core_syscall_sys_ipc_get_hid.cpp:syscall::sys_ipc_get_hid: Syscall to get the handler id of an ipc handler
#core_syscall_sys_exit.cpp:syscall::sys_exit: Syscall to exit the current process
#core_syscall_sys_sound_sync.cpp:syscall::sys_sound_sync: Syscall to wait for the sound device to finish playing the queue
#core_syscall_sys_touch.cpp:syscall::sys_touch: Syscall to create a new file
#core_syscall_sys_open.cpp:syscall::sys_open: Syscall to open a file
#core_syscall_sys_read.cpp:syscall::sys_read: Syscall to read from a file
#core_syscall_sys_delete.cpp:syscall::sys_delete: Syscall to delete a file
#core_syscall_sys_close.cpp:syscall::sys_close: Syscall to close a file
#core_syscall_sys_ipc_register.cpp:syscall::sys_ipc_register: Syscall to register an ipc handler
#core_syscall_sys_dns_resolve.cpp:syscall::sys_dns_resolve: Syscall to resolve a hostname to an ip address
#core_syscall_sys_mouse_get_pos.cpp:syscall::sys_mouse_get_pos: Syscall to get the mouse position
#core_syscall_sys_fs_at.cpp:syscall::sys_fs_at: Syscall to get the mounted filesystem
#core_syscall_syscall.cpp:syscall::setup: Sets up the syscall table
#core_syscall_syscall.cpp:test_syscall: Test syscall
#core_syscall_syscall.cpp:syscall::get_id_syscall: Syscall to get the id of an syscall
#core_syscall_sys_spawn.cpp:syscall::sys_spawn: Syscall to spawn a new process
#core_syscall_sys_mouse_reset.cpp:syscall::sys_mouse_reset: Syscall to reset the mouse
#core_syscall_sys_dir_at.cpp:syscall::sys_dir_at: Syscall to get the contents of a directory
#core_syscall_sys_ipc_unregister.cpp:syscall::sys_ipc_unregister: Syscall to unregister an ipc handler
#core_syscall_sys_sound_get_channel_count.cpp:syscall::sys_sound_get_channel_count: Syscall to get the number of sound channels available
#core_syscall_sys_delay.cpp:syscall::sys_delay: Syscall to delay the current process
#core_syscall_sys_icmp_echo_request.cpp:syscall::sys_icmp_echo_request: Syscall to send an icmp echo request
#core_syscall_sys_insmod.cpp:syscall::sys_insmod: Syscall to load a kernel module
#core_syscall_sys_dbg.cpp:syscall::sys_dbg: Syscall to print a debug message
#core_utils_argparse.cpp:setup_global_argparser: Sets up the global argparser
#core_utils_argparse.cpp:argparser::get_arg: Gets an argument from the argparser
#core_utils_argparse.cpp:argparser::is_arg: Checks if an argument is present in the argparser
#core_utils_argparse.cpp:argparser::argparser: Constructor for the argparser class
#core_utils_vsprintf.cpp:vsprintf: Prints a formatted string to a buffer
#core_utils_vsprintf.cpp:print_num: Prints a number to a buffer
#core_utils_lock.asm:atomic_spinlock: Waits for a spinlock to be unlocked
#core_utils_lock.asm:atomic_unlock: Unlocks a spinlock
#core_utils_lock.asm:atomic_lock: Locks a spinlock
#core_utils_mmio.cpp:MMIO::write64: Writes a 64 bit value to a mmio register
#core_utils_mmio.cpp:MMIO::write32: Writes a 32 bit value to a mmio register
#core_utils_mmio.cpp:MMIO::write16: Writes a 16 bit value to a mmio register
#core_utils_mmio.cpp:MMIO::write8: Writes a 8 bit value to a mmio register
#core_utils_mmio.cpp:MMIO::read64: Reads a 64 bit value from a mmio register
#core_utils_mmio.cpp:MMIO::read32: Reads a 32 bit value from a mmio register
#core_utils_mmio.cpp:MMIO::read16: Reads a 16 bit value from a mmio register
#core_utils_mmio.cpp:MMIO::read8: Reads a 8 bit value from a mmio register
#core_utils_assert.cpp:__assert_fail: If an assertion fails, this function is called
#core_utils_port.cpp:outl: Writes a 32 bit value to a port
#core_utils_port.cpp:inl: Reads a 32 bit value from a port
#core_utils_port.cpp:outw: Writes a 16 bit value to a port
#core_utils_port.cpp:inw: Reads a 16 bit value from a port
#core_utils_port.cpp:outb: Writes a 8 bit value to a port
#core_utils_port.cpp:inb: Reads a 8 bit value from a port
#core_utils_port.cpp:io_wait: Waits for a port to be ready
#core_utils_port.cpp:Port32Bit::Write: Writes a 32 bit value to a port
#core_utils_port.cpp:Port32Bit::Read: Reads a 32 bit value from a port
#core_utils_port.cpp:Port32Bit::~Port32Bit: Destructor for the class
#core_utils_port.cpp:Port32Bit::Port32Bit: Constructor for the class
#core_utils_port.cpp:Port16Bit::Write: Writes a 16 bit value to a port
#core_utils_port.cpp:Port16Bit::Read: Reads a 16 bit value from a port
#core_utils_port.cpp:Port16Bit::~Port16Bit: Destructor for the class
#core_utils_port.cpp:Port16Bit::Port16Bit: Constructor for the class
#core_utils_port.cpp:Port8Bit::Write: Writes a 8 bit value to a port
#core_utils_port.cpp:Port8Bit::Read: Reads a 8 bit value from a port
#core_utils_port.cpp:Port8Bit::~Port8Bit: Destructor for the class
#core_utils_port.cpp:Port8Bit::Port8Bit: Constructor for the class
#core_utils_abort.cpp:abortf: Causes a kernel panic
#core_utils_string.cpp:strcmp: Compares two strings
#core_utils_string.cpp:memcmp: Compares two memory regions
#core_utils_string.cpp:memset: Sets a memory region to a value
#core_utils_string.cpp:memcpy: Copies a memory region
#core_utils_string.cpp:sprintf: Prints a formatted string to a buffer
#core_utils_string.cpp:strcat: Concatenates two strings
#core_utils_string.cpp:strchr: Searches for a character in a string
#core_utils_string.cpp:strnlen: Gets the length of a string
#core_utils_string.cpp:strlen: Gets the length of a string
#core_utils_string.cpp:strcpy: Copies a string
#core_utils_log.cpp:printf: Prints a formatted string to the screen
#core_utils_log.cpp:debugf_intrnl: Internal function used for debugf
#core_utils_fxsr.asm:fxrstor_if_supported: Restores the fpu state if it is supported
#core_utils_fxsr.asm:fxsave_if_supported: Saves the fpu state if it is supported
#core_utils_unix_time.cpp:from_unix_time: Converts unix time to a struct
#core_utils_unix_time.cpp:to_unix_time: Converts a struct to unix time
#core_utils_ipc.cpp:ipc::init: Initializes the ipc system
#core_utils_ipc.cpp:ipc_manager::send_message: Sends a message to a process
#core_utils_ipc.cpp:ipc_manager::get_hid: Gets the handler id of an ipc handler
#core_utils_ipc.cpp:ipc_manager::unregister_callback: Unregisters an ipc handler
#core_utils_ipc.cpp:ipc_manager::register_callback: Registers an ipc handler
#core_utils_ipc.cpp:ipc_manager::ipc_manager: Constructor for the ipc manager class
#core_utils_cstr.cpp:num_to_string: Converts a number to a string
#core_elf_elf_loader.cpp:elf::load_elf: Loads an elf file
#core_elf_elf_loader.cpp:elf_apply_relocations: Applies relocations to an elf file
#core_elf_elf_resolver.cpp:elf::resolve_symbol: Resolves a symbol in the kernel and the loaded modules
#core_elf_elf_resolver.cpp:elf::setup: Sets up the elf resolver system
#core_elf_elf_resolver.cpp:elf_symbol_resolver::resolve: Resolves a symbol in an elf file
#core_elf_elf_resolver.cpp:elf_symbol_resolver::elf_symbol_resolver: Constructor for the elf symbol resolver class
#core_elf_kernel_module.cpp:elf::fs_init_all: Calls the fs_init function for all modules
#core_elf_kernel_module.cpp:elf::device_init_all: Calls the device_init function for all modules
#core_elf_kernel_module.cpp:elf::load_kernel_module: Loads a kernel module
#core_elf_kernel_module.cpp:kernel_module_render_status: Renders the status of loading process of a kernel module
#core_elf_function_patch.cpp:unpatch: Unpatches a function
#core_elf_function_patch.cpp:elf::patch: Patches a function
#core_renderer_boot_screen_renderer.cpp:boot_screen_renderer::handle: Handles the timer interrupt for the boot screen renderer
#core_renderer_boot_screen_renderer.cpp:boot_screen_renderer::set_progress: Sets the progress of the boot screen progress bar
#core_renderer_boot_screen_renderer.cpp:boot_screen_renderer::putstring: Does nothing
#core_renderer_boot_screen_renderer.cpp:boot_screen_renderer::putchar: Does nothing
#core_renderer_boot_screen_renderer.cpp:boot_screen_renderer::~boot_screen_renderer: Destructor for the class
#core_renderer_boot_screen_renderer.cpp:boot_screen_renderer::boot_screen_renderer: Constructor for the class
#core_renderer_font_renderer.cpp:font_renderer::write: Handler for the font_renderer dev fs file
#core_renderer_font_renderer.cpp:font_renderer::get_name: Gets the name of the dev fs file
#core_renderer_font_renderer.cpp:font_renderer::reset_color: Resets the color of the font renderer
#core_renderer_font_renderer.cpp:font_renderer::set_color: Sets the color of the font renderer
#core_renderer_font_renderer.cpp:font_renderer::clear_line: Clears the current line
#core_renderer_font_renderer.cpp:font_renderer::clear: Clears the screen
#core_renderer_font_renderer.cpp:font_renderer::putstring: Writes a string to the screen
#core_renderer_font_renderer.cpp:font_renderer::putchar: Writes a character to the screen
#core_renderer_font_renderer.cpp:font_renderer::font_renderer: Constructor for the class
#core_timer_timer.cpp:timer::setup: Sets up the timers in the system
#core_timer_timer.cpp:timer_device::sleep: Sleeps for a certain amount of time
#core_timer_hpet.cpp:timer_device::get_ticks_per_second: Gets the number ticks per second of the timer
#core_timer_hpet.cpp:timer_device::get_ticks: Gets the current number of ticks of the timer since initialized
#core_timer_pit.cpp:pit_timer::sleep: Sleeps for a certain amount of time
#core_timer_hpet.cpp:pit_timer::get_ticks_per_second: Gets the number ticks per second of the pit timer
#core_timer_hpet.cpp:pit_timer::get_ticks: Gets the current number of ticks of the pit timer since initialized
#core_timer_pit.cpp:pit_timer::handle: Handles the timer interrupt for the pit timer
#core_timer_pit.cpp:pit_timer::set_divisor: Sets the divisor of the pit timer
#core_timer_pit.cpp:pit_timer::pit_timer: Constructor for the pit timer class
#core_timer_hpet.cpp:hpet_timer::is_available: Checks if the hpet timer is available
#core_timer_hpet.cpp:hpet_timer::sleep: Sleeps for a certain amount of time
#core_timer_hpet.cpp:hpet_timer::get_ticks_per_second: Gets the number ticks per second of the hpet timer
#core_timer_hpet.cpp:hpet_timer::get_ticks: Gets the current number of ticks of the hpet timer since initialized
#core_timer_hpet.cpp:hpet_timer::hpet_timer: Constructor for the hpet timer class
#core_sound_sound.cpp:sound_device::get_channel_count: Gets the number of channels of the sound device
#core_sound_sound.cpp:sound_device::sync: Waits until the sound device queue is empty
#core_sound_sound.cpp:sound_device::push_note: Pushes a note to the sound device queue
#core_sound_sound.cpp:sound_device::sound_device: Constructor for the sound device class
#core_scheduler_scheduler.cpp:scheduler::get_cwd_self: Gets the current working directory of the current process
#core_scheduler_scheduler.cpp:scheduler::read_running_tasks: Get a list of all running tasks
#core_scheduler_scheduler.cpp:scheduler::set_cwd_self: Sets the current working directory of the current process
#core_scheduler_scheduler.cpp:scheduler::register_signal_handler_self: Registers a signal handler for the current process
#core_scheduler_scheduler.cpp:scheduler::handle_signal_all_tasks: Sends an signal to all tasks
#core_scheduler_scheduler.cpp:scheduler::handle_signal: Sends an signal to the current task
#core_scheduler_scheduler.cpp:scheduler::create_task: Creates a new task
#core_scheduler_scheduler.cpp:scheduler::kill_self: Kills the current task
#core_scheduler_scheduler.cpp:scheduler::start: Starts the scheduler
#core_scheduler_scheduler.cpp:scheduler::setup: Sets up the scheduler
#core_scheduler_scheduler.cpp:scheduler_interrupt: Handles the timer interrupt for the scheduler
#core_sanitizers_ubsan.cpp:__ubsan_handle_pointer_overflow: Sanitizer handler for a pointer overflow
#core_sanitizers_ubsan.cpp:__ubsan_handle_invalid_builtin: Sanitizer handler for an invalid builtin
#core_sanitizers_ubsan.cpp:__ubsan_handle_implicit_conversion: Sanitizer handler for an implicit conversion
#core_sanitizers_ubsan.cpp:__ubsan_handle_missing_return: Sanitizer handler for a missing return
#core_sanitizers_ubsan.cpp:__ubsan_handle_builtin_unreachable: Sanitizer handler for a builtin unreachable
#core_sanitizers_ubsan.cpp:__ubsan_handle_alignment_assumption: Sanitizer handler for an alignment assumption
#core_sanitizers_ubsan.cpp:__ubsan_handle_type_mismatch_v1: Sanitizer handler for a type mismatch
#core_sanitizers_ubsan.cpp:__ubsan_handle_out_of_bounds: Sanitizer handler for an out of bounds access
#core_sanitizers_ubsan.cpp:__ubsan_handle_divrem_overflow: Sanitizer handler for a division overflow
#core_sanitizers_ubsan.cpp:__ubsan_handle_mul_overflow: Sanitizer handler for a multiplication overflow
#core_sanitizers_ubsan.cpp:__ubsan_handle_negate_overflow: Sanitizer handler for a negation overflow
#core_sanitizers_ubsan.cpp:__ubsan_handle_sub_overflow: Sanitizer handler for a subtraction overflow
#core_sanitizers_ubsan.cpp:__ubsan_handle_add_overflow: Sanitizer handler for an addition overflow
#core_sanitizers_ubsan.cpp:__ubsan_handle_vla_bound_not_positive: Sanitizer handler for a vla bound not positive
#core_sanitizers_ubsan.cpp:__ubsan_handle_nullability_return_v1: Sanitizer handler for a nullability return
#core_sanitizers_ubsan.cpp:__ubsan_handle_nonnull_return_v1: Sanitizer handler for a nonnull return
#core_sanitizers_ubsan.cpp:__ubsan_handle_nullability_arg: Sanitizer handler for a nullability argument
#core_sanitizers_ubsan.cpp:__ubsan_handle_nonnull_arg: Sanitizer handler for a nonnull argument
#core_sanitizers_ubsan.cpp:__ubsan_handle_load_invalid_value: Sanitizer handler for a load invalid value

#core_scheduler_smp.cpp:smp::ap_main: Main entry point for application processors
#core_scheduler_smp.cpp:smp::startup: Start all application processors using the boot_info struct
#core_scheduler_bootstrap.asm:bootstrap: Sets up a application processors to be able to run cpp code

#core_boot_limine_entry.asm:cpu_init: Initializes the CPU
#core_boot_limine_entry.asm:_start_limine: The main entry point for the limine boot protocol
#core_boot_stivale2.cpp:boot::print_boot_info: Prints the boot information
#core_boot_stivale2.cpp:stivale2_entry: The c entry point for the stivale2 boot protocol
#core_boot_stivale2.cpp:stivale2_memmap_entry_conv: Converts a stivale2 memory map entry to a memory map entry for the kernel
#core_boot_stivale2.cpp:putchar: Writes a character to the screen
#core_boot_stivale2.cpp:putstring: Writes a string to the screen
#core_boot_stivale2_entry.asm:cpu_init: Initializes the CPU
#core_boot_stivale2_entry.asm:_start_stivale2: The main entry point for the stivale2 boot protocol
#core_boot_boot.cpp:bootinfo_dev_fs_file::get_name: Gets the name of the dev fs file
#core_boot_boot.cpp:bootinfo_dev_fs_file::prepare_file: Prepares the dev fs file
#core_boot_boot.cpp:bootinfo_dev_fs_file::read: Reads the dev fs file
#core_boot_boot.cpp:print_boot_info: Prints the boot information
#core_boot_boot.cpp:bootinfo_dev_fs_file::bootinfo_dev_fs_file: Constructor for the dev fs file class
#core_boot_boot.cpp:memmap_id_to_str: Converts a memory map id to a string
#core_boot_boot.cpp:_start: Dummy function to make the linker happy
#core_boot_limine.cpp:boot::print_boot_info: Prints the boot information
#core_boot_limine.cpp:limine_entry: The c entry point for the limine boot protocol
#core_boot_limine.cpp:limine_memmap_entry_conv: Converts a limine memory map entry to a memory map entry for the kernel
#core_boot_limine.cpp:putchar: Writes a character to the screen
#core_boot_limine.cpp:putstring: Writes a string to the screen

#core_pci_pci.cpp:enumerate_function: Enumerates a PCI function
#core_pci_pci.cpp:enumerate_device: Enumerates a PCI device
#core_pci_pci.cpp:enumerate_bus: Enumerates the PCI bus
#core_pci_pci.cpp:enumerate_mcfg: Enumerates the PCI bus using the MCFG table
#core_pci_pci.cpp:enumerate_legacy: Enumerates the PCI bus using the legacy method
#core_pci_pci.cpp:pci::enumerate_pci: Enumerates the PCI bus either using the MCFG table or the legacy method
#core_pci_pci_bar.cpp:read_bar: Reads a PCI BAR
#core_pci_pci_bar.cpp:pci::get_bar: Gets a PCI BAR
#core_pci_pci_bar.cpp:pci::get_io_port: Gets the IO port of a PCI BAR
#core_pci_pci_descriptors.cpp:get_vendor_name: Gets the vendor name of a PCI device
#core_pci_pci_descriptors.cpp:get_device_name: Gets the device name of a PCI device
#core_pci_pci_descriptors.cpp:mass_storage_controller_subclass_name: Gets the mass storage controller subclass name of a PCI device
#core_pci_pci_descriptors.cpp:serial_bus_controller_subclass_name: Gets the serial bus controller subclass name of a PCI device
#core_pci_pci_descriptors.cpp:bridge_device_subclass_name: Gets the bridge device subclass name of a PCI device
#core_pci_pci_descriptors.cpp:get_subclass_name: Gets the subclass name of a PCI device
#core_pci_pci_descriptors.cpp:get_prog_IF_name: Gets the programming interface name of a PCI device
#core_pci_pci_io.cpp:pci::pci_readd: Reads a dword from a PCI register
#core_pci_pci_io.cpp:pci::pci_writed: Writes a dword to a PCI register
#core_pci_pci_io.cpp:pci::pci_writeb: Writes a byte to a PCI register
#core_pci_pci_io.cpp:pci::pci_readb: Reads a byte from a PCI register
#core_pci_pci_io.cpp:pci::pci_writew: Writes a word to a PCI register
#core_pci_pci_io.cpp:pci::pci_readw: Reads a word from a PCI register
#core_pci_pci_io.cpp:pci::device_has_functions: Checks if a PCI device has functions
#core_pci_pci_io.cpp:pci::get_device_header: Gets the device header of a PCI device using the legacy method
#core_pci_pci_io.cpp:pci::enable_mmio: Enables MMIO on a PCI device
#core_pci_pci_io.cpp:pci::become_bus_master: Makes a PCI device a bus master

#core_fs_vfs.cpp:vfs_manager::vfs_manager: Constructor for the vfs manager class
#core_fs_vfs.cpp:vfs_manager::open: Opens a file
#core_fs_vfs.cpp:vfs_manager::close: Closes a file
#core_fs_vfs.cpp:vfs_manager::read: Reads from a file
#core_fs_vfs.cpp:vfs_manager::write: Writes to a file
#core_fs_vfs.cpp:vfs_manager::delete_: Deletes a file
#core_fs_vfs.cpp:vfs_manager::mkdir: Creates a directory
#core_fs_vfs.cpp:vfs_manager::dir_at: Gets the directory at a path
#core_fs_vfs.cpp:vfs_manager::touch: Creates a file
#core_fs_vfs.cpp:vfs_manager::delete_dir: Deletes a directory
#core_fs_vfs.cpp:vfs_manager::register_mount: Registers a mount point
#core_fs_vfs.cpp:vfs_manager::unregister_mount: Unregisters a mount point
#core_fs_vfs.cpp:vfs_manager::fs_at: Gets the filesystem at a index
#core_fs_vfs.cpp:vfs_mount::open: Opens a file
#core_fs_vfs.cpp:vfs_mount::close: Closes a file
#core_fs_vfs.cpp:vfs_mount::read: Reads from a file
#core_fs_vfs.cpp:vfs_mount::write: Writes to a file
#core_fs_vfs.cpp:vfs_mount::delete_: Deletes a file
#core_fs_vfs.cpp:vfs_mount::mkdir: Creates a directory
#core_fs_vfs.cpp:vfs_mount::dir_at: Gets the directory at a path
#core_fs_vfs.cpp:vfs_mount::touch: Creates a file
#core_fs_vfs.cpp:vfs_mount::delete_dir: Deletes a directory
#core_fs_vfs.cpp:fs::vfs::setup: Sets up the vfs
#core_fs_fd.cpp:file_descriptor::file_descriptor: Constructor for the file descriptor class
#core_fs_fd.cpp:file_descriptor::~file_descriptor: Destructor for the file descriptor class
#core_fs_fd.cpp:file_descriptor::close: Closes a file
#core_fs_fd.cpp:file_descriptor::open: Opens a file
#core_fs_fd.cpp:file_descriptor::read: Reads from a file
#core_fs_fd.cpp:file_descriptor::write: Writes to a file
#core_fs_fd.cpp:file_descriptor::delete_: Deletes a file
#core_fs_fd.cpp:file_descriptor_manager::file_descriptor_manager: Constructor for the file descriptor manager class
#core_fs_fd.cpp:file_descriptor_manager::alloc_fd: Allocates a file descriptor
#core_fs_fd.cpp:file_descriptor_manager::free_fd: Frees a file descriptor
#core_fs_fd.cpp:file_descriptor_manager::register_fd: Registers a file descriptor
#core_fs_fd.cpp:file_descriptor_manager::get_fd: Gets a file descriptor
#core_fs_gpt.cpp:fs::gpt::read_gpt: Reads the GPT from a disk and sets up virtual disks for each partition
#core_fs_dev_fs.cpp:dev_fs_file::read: Reads from a file
#core_fs_dev_fs.cpp:dev_fs_file::write: Writes to a file
#core_fs_dev_fs.cpp:dev_fs_file::get_name: Gets the name of a file
#core_fs_dev_fs.cpp:dev_fs_file::prepare_file: Prepares a file for use
#core_fs_dev_fs.cpp:dev_fs::dev_fs: Constructor for the dev_fs class
#core_fs_dev_fs.cpp:dev_fs::register_file: Registers a file
#core_fs_dev_fs.cpp:dev_fs::unregister_file: Unregisters a file
#core_fs_dev_fs.cpp:dev_fs::open: Opens a file
#core_fs_dev_fs.cpp:dev_fs::close: Closes a file
#core_fs_dev_fs.cpp:dev_fs::read: Reads from a file
#core_fs_dev_fs.cpp:dev_fs::write: Writes to a file
#core_fs_dev_fs.cpp:dev_fs::dir_at: Gets the directory at a path
#core_fs_modules_mount.cpp:modules_mount::modules_mount: Constructor for the modules mount class
#core_fs_modules_mount.cpp:modules_mount::open: Opens a file
#core_fs_modules_mount.cpp:modules_mount::close: Closes a file
#core_fs_modules_mount.cpp:modules_mount::read: Reads from a file
#core_fs_modules_mount.cpp:modules_mount::dir_at: Gets the directory at a path
#core_fs_saf.cpp:saf_mount::saf_mount: Constructor for the saf mount class
#core_fs_saf.cpp:saf_mount::open: Opens a file
#core_fs_saf.cpp:saf_mount::close: Closes a file
#core_fs_saf.cpp:saf_mount::read: Reads from a file
#core_fs_saf.cpp:saf_mount::dir_at: Gets the directory at a path
#core_fs_saf.cpp:saf_mount::resolve: Resolves a path to a file
#core_fs_saf.cpp:saf_mount::process_path: Processes a path

#core_driver_clock.cpp:clock_device::time: Gets the time
#core_driver_virtual_disk.cpp:virtual_disk_device::virtual_disk_device: Constructor for the virtual disk device class
#core_driver_virtual_disk.cpp:virtual_disk_device::~virtual_disk_device: Destructor for the virtual disk device class
#core_driver_virtual_disk.cpp:virtual_disk_device::read: Reads from the disk
#core_driver_virtual_disk.cpp:virtual_disk_device::write: Writes to the disk
#core_driver_disk.cpp:disk_device::disk_device: Constructor for the disk device class
#core_driver_disk.cpp:disk_device::~disk_device: Destructor for the disk device class
#core_driver_disk.cpp:disk_device::read: Reads from the disk
#core_driver_disk.cpp:disk_device::write: Writes to the disk
#core_driver_disk.cpp:disk_device::get_disk_label: Gets the disk label
#core_driver_disk.cpp:disk_driver_manager::disk_driver_manager: Constructor for the disk driver manager class
#core_driver_disk.cpp:disk_driver_manager::add_disk: Adds a disk to the disk driver manager
#core_driver_disk.cpp:disk_driver_manager::read: Reads from a disk
#core_driver_disk.cpp:disk_driver_manager::write: Writes to a disk
#core_driver_disk.cpp:raw_disk_dev_fs::raw_disk_dev_fs: Constructor for the raw disk dev fs class
#core_driver_disk.cpp:raw_disk_dev_fs::get_name: Gets the name of a file
#core_driver_disk.cpp:raw_disk_dev_fs::write: Writes to a file
#core_driver_driver.cpp:device_driver::device_driver: Constructor for the device driver class
#core_driver_driver.cpp:device_driver::~device_driver: Destructor for the device driver class
#core_driver_driver.cpp:device_driver::activate: Activates the device driver
#core_driver_driver.cpp:device_driver::is_presend: Checks if the device is presend
#core_driver_driver.cpp:device_driver::get_name: Gets the name of a device driver
#core_driver_driver.cpp:device_driver::get_activated: Gets the activated state of a device driver
#core_driver_driver.cpp:device_driver::set_activated: Sets the activated state of a device driver
#core_driver_driver.cpp:driver_manager::driver_manager: Constructor for the driver manager class
#core_driver_driver.cpp:driver_manager::add_driver: Adds a driver to the driver manager
#core_driver_driver.cpp:driver_manager::set_status: Sets the status of a driver
#core_driver_driver.cpp:driver_manager::activate_driver: Activates a driver
#core_driver_driver.cpp:driver_manager::activate_all: Activates all drivers
#core_driver_driver.cpp:driver_manager::find_driver_by_name: Finds a driver by name
#core_driver_nic.cpp:driver::load_network_stack: Loads the network stack
#core_driver_nic.cpp:nic_device::nic_device: Constructor for the nic device class
#core_driver_nic.cpp:nic_device::~nic_device: Destructor for the nic device class
#core_driver_nic.cpp:nic_device::send: Sends a packet
#core_driver_nic.cpp:nic_device::register_nic_data_manager: Registers a nic data manager
#core_driver_nic.cpp:nic_device::get_mac: Gets the mac address of the nic
#core_driver_nic.cpp:nic_device::get_ip: Gets the ip address of the nic
#core_driver_nic.cpp:nic_device::set_ip: Sets the ip address of the nic
#core_driver_nic.cpp:nic_device::load_network_stack: Loads the network stack
#core_driver_nic.cpp:nic_data_manager::nic_data_manager: Constructor for the nic data manager class
#core_driver_nic.cpp:nic_data_manager::~nic_data_manager: Destructor for the nic data manager class
#core_driver_nic.cpp:nic_data_manager::send: Sends a packet
#core_driver_nic.cpp:nic_data_manager::recv: Receives a packet
#core_driver_nic.cpp:nic_driver_manager::nic_driver_manager: Constructor for the nic driver manager class
#core_driver_nic.cpp:nic_driver_manager::add_nic: Adds a nic to the nic driver manager
#core_driver_nic.cpp:nic_driver_manager::get_nic: Gets a nic from the nic driver manager

#core_interrupts_idt.cpp:idt_desc_entry_t::set_offset: Sets the offset of the idt entry
#core_interrupts_idt.cpp:idt_desc_entry_t::get_offset: Gets the offset of the idt entry
#core_interrupts_interrupt_handler.cpp:interrupt_handler::interrupt_handler: Constructor for the interrupt handler class
#core_interrupts_interrupt_handler.cpp:interrupt_handler::~interrupt_handler: Destructor for the interrupt handler class
#core_interrupts_interrupt_handler.cpp:interrupt_handler::handle: Handles an interrupt
#core_interrupts_interrupt_handler.cpp:interrupts::register_interrupt_handler: Registers an interrupt handler
#core_interrupts_interrupts_stub.asm:intr_common_handler: Common handler for interrupts
#core_interrupts_interrupts.cpp:interrupts::get_interrupt_name: Gets the name of an interrupt
#core_interrupts_interrupts.cpp:interrupts::set_idt_gate: Sets an idt gate
#core_interrupts_interrupts.cpp:interrupts::prepare_interrupts: Prepares the interrupts
#core_interrupts_interrupts.cpp:intr_common_handler_c: Common handler for interrupts
#core_interrupts_interrupts.cpp:elf::unwind: Unwinds the stack

#core_memory_pagetable.cpp:page_directory_entry_t::set_flag: Sets the flags of the page directory entry
#core_memory_pagetable.cpp:page_directory_entry_t::get_flag: Gets the flags of the page directory entry
#core_memory_pagetable.cpp:page_directory_entry_t::get_address: Gets the address of the page directory entry
#core_memory_pagetable.cpp:page_directory_entry_t::set_address: Sets the address of the page directory entry
#core_memory_bitmap.cpp:bitmap::operator[]: Gets the value of a bit in the bitmap
#core_memory_bitmap.cpp:bitmap::get: Gets the value of a bit in the bitmap
#core_memory_bitmap.cpp:bitmap::set: Sets the value of a bit in the bitmap
#core_memory_page_table_manager.cpp:page_table_manager::page_table_manager: Constructor for the page table manager class
#core_memory_page_table_manager.cpp:page_table_manager::map_memory: Maps a page of memory
#core_memory_page_table_manager.cpp:page_table_manager::map_range: Maps a range of pages of memory
#core_memory_page_table_manager.cpp:page_table_manager::virt_to_phys: Converts a virtual address to a physical address
#core_memory_memory.cpp:memory::get_memory_size: Gets the size of the memory
#core_memory_memory.cpp:memory::prepare_memory: Prepares the memory
#core_memory_heap.cpp:memory::initialize_heap: Initializes the heap
#core_memory_heap.cpp:memory::free: Frees a block of memory
#core_memory_heap.cpp:memory::malloc: Allocates a block of memory
#core_memory_heap.cpp:memory::realloc: Reallocates a block of memory
#core_memory_heap.cpp:heap_segment_header_t::split: Splits a heap segment header
#core_memory_heap.cpp:memory::expand_heap: Expands the heap
#core_memory_heap.cpp:heap_segment_header_t::combine_forward: Combines a heap segment header forward
#core_memory_heap.cpp:heap_segment_header_t::combine_backward: Combines a heap segment header backward
#core_memory_heap.cpp:new: Allocates a block of memory
#core_memory_heap.cpp:new[]: Allocates a block of memory
#core_memory_heap.cpp:delete: Frees a block of memory
#core_memory_heap.cpp:delete[]: Frees a block of memory
#core_memory_page_map_indexer.cpp:page_map_indexer::page_map_indexer: Constructor for the page map indexer class
#core_memory_page_frame_allocator.cpp:page_frame_allocator::read_EFI_memory_map: Reads the EFI memory map
#core_memory_page_frame_allocator.cpp:page_frame_allocator::init_bitmap: Initializes the bitmap
#core_memory_page_frame_allocator.cpp:page_frame_allocator::request_page_internal: Requests a page of memory
#core_memory_page_frame_allocator.cpp:page_frame_allocator::request_page: Requests a page of memory
#core_memory_page_frame_allocator.cpp:page_frame_allocator::request_pages_internal: Requests pages of memory
#core_memory_page_frame_allocator.cpp:page_frame_allocator::request_pages: Requests pages of memory
#core_memory_page_frame_allocator.cpp:page_frame_allocator::free_page: Frees a page of memory
#core_memory_page_frame_allocator.cpp:page_frame_allocator::free_pages: Frees pages of memory
#core_memory_page_frame_allocator.cpp:page_frame_allocator::lock_page: Locks a page of memory
#core_memory_page_frame_allocator.cpp:page_frame_allocator::lock_pages: Locks pages of memory
#core_memory_page_frame_allocator.cpp:page_frame_allocator::unreserve_page: Unreserves a page of memory
#core_memory_page_frame_allocator.cpp:page_frame_allocator::unreserve_pages: Unreserves pages of memory
#core_memory_page_frame_allocator.cpp:page_frame_allocator::reserve_page: Reserves a page of memory
#core_memory_page_frame_allocator.cpp:page_frame_allocator::reserve_pages: Reserves pages of memory
#core_memory_page_frame_allocator.cpp:page_frame_allocator::get_free_RAM: Gets the amount of free RAM
#core_memory_page_frame_allocator.cpp:page_frame_allocator::get_used_RAM: Gets the amount of used RAM
#core_memory_page_frame_allocator.cpp:page_frame_allocator::get_reserved_RAM: Gets the amount of reserved RAM

#core_net_dhcp.cpp:dhcp_protocol::dhcp_protocol: Constructor for the dhcp protocol class
#core_net_dhcp.cpp:dhcp_protocol::~dhcp_protocol: Destructor for the dhcp protocol class
#core_net_dhcp.cpp:dhcp_protocol::request: Requests a DHCP lease
#core_net_dhcp.cpp:dhcp_protocol::on_udp_message: Handles a UDP message
#core_net_dhcp.cpp:dhcp_protocol::get_dhcp_options: Gets the DHCP options
#core_net_dhcp.cpp:dhcp_protocol::make_dhcp_packet: Makes a DHCP packet
#core_net_ipv4.cpp:ipv4_handler::ipv4_handler: Constructor for the ipv4 handler class
#core_net_ipv4.cpp:ipv4_handler::~ipv4_handler: Destructor for the ipv4 handler class
#core_net_ipv4.cpp:ipv4_handler::send: Sends an IPv4 packet
#core_net_ipv4.cpp:ipv4_handler::on_internet_protocol_received: Handles an IPv4 packet
#core_net_ipv4.cpp:ipv4_provider::ipv4_provider: Constructor for the ipv4 provider class
#core_net_ipv4.cpp:ipv4_provider::~ipv4_provider: Destructor for the ipv4 provider class
#core_net_ipv4.cpp:ipv4_provider::on_ether_frame_received: Handles an Ethernet frame
#core_net_ipv4.cpp:ipv4_provider::send: Sends an IPv4 packet
#core_net_ipv4.cpp:ipv4_provider::checksum: Calculates the checksum of an IPv4 packet
#core_net_etherframe.cpp:ether_frame_handler::ether_frame_handler: Constructor for the ether frame handler class
#core_net_etherframe.cpp:ether_frame_handler::~ether_frame_handler: Destructor for the ether frame handler class
#core_net_etherframe.cpp:ether_frame_handler::on_ether_frame_received: Handles an Ethernet frame
#core_net_etherframe.cpp:ether_frame_handler::send: Sends an Ethernet frame
#core_net_etherframe.cpp:ether_frame_provider::ether_frame_provider: Constructor for the ether frame provider class
#core_net_etherframe.cpp:ether_frame_provider::~ether_frame_provider: Destructor for the ether frame provider class
#core_net_etherframe.cpp:ether_frame_provider::recv: Receives an Ethernet frame
#core_net_etherframe.cpp:ether_frame_provider::send_f: Sends an Ethernet frame
#core_net_arp.cpp:address_resolution_protocol::address_resolution_protocol: Constructor for the address resolution protocol class
#core_net_arp.cpp:address_resolution_protocol::~address_resolution_protocol: Destructor for the address resolution protocol class
#core_net_arp.cpp:address_resolution_protocol::on_ether_frame_received: Handles an Ethernet frame
#core_net_arp.cpp:address_resolution_protocol::broadcast_mac: Broadcasts an ARP packet
#core_net_arp.cpp:address_resolution_protocol::request_mac_address: Requests the MAC address of a host
#core_net_arp.cpp:address_resolution_protocol::get_mac_from_cache: Gets the MAC address of a host from the cache
#core_net_arp.cpp:address_resolution_protocol::resolve: Resolves an IP address to a MAC address
#core_net_ntp.cpp:network_time_protocol::network_time_protocol: Constructor for the network time protocol class
#core_net_ntp.cpp:network_time_protocol::on_udp_message: Handles a UDP message
#core_net_ntp.cpp:network_time_protocol::time: Gets the time
#core_net_tcp.cpp:tcp_handler::tcp_handler: Constructor for the tcp handler class
#core_net_tcp.cpp:tcp_handler::~tcp_handler: Destructor for the tcp handler class
#core_net_tcp.cpp:tcp_handler::on_tcp_message: Handles a TCP message
#core_net_tcp.cpp:tcp_socket::tcp_socket: Constructor for the tcp socket class
#core_net_tcp.cpp:tcp_socket::~tcp_socket: Destructor for the tcp socket class
#core_net_tcp.cpp:tcp_socket::handle_tcp_message: Handles a TCP message
#core_net_tcp.cpp:tcp_socket::send: Sends a TCP message
#core_net_tcp.cpp:tcp_socket::disconnect: Disconnects the socket
#core_net_tcp.cpp:tcp_provider::tcp_provider: Constructor for the tcp provider class
#core_net_tcp.cpp:tcp_provider::on_internet_protocol_received: Handles an IPv4 packet
#core_net_tcp.cpp:tcp_provider::connect: Connects to a host
#core_net_tcp.cpp:tcp_provider::listen: Listens for incoming connections
#core_net_tcp.cpp:tcp_provider::disconnect: Disconnects the socket
#core_net_tcp.cpp:tcp_provider::send: Sends a TCP message
#core_net_tcp.cpp:tcp_provider::retransmit: Retransmits a TCP message
#core_net_tcp.cpp:tcp_provider::bind: Binds the socket to a port
#core_net_dns.cpp:domain_name_service_provider::domain_name_service_provider: Constructor for the domain name service provider class
#core_net_dns.cpp:domain_name_service_provider::~domain_name_service_provider: Destructor for the domain name service provider class
#core_net_dns.cpp:domain_name_service_provider::resolv_domain_to_hostname: Resolves a domain name to a hostname
#core_net_dns.cpp:domain_name_service_provider::resolv_hostname_to_domain: Resolves a hostname to a domain name
#core_net_dns.cpp:domain_name_service_provider::resolv_skip_name: Skips a name
#core_net_dns.cpp:domain_name_service_provider::dns_request: Sends a DNS request
#core_net_dns.cpp:domain_name_service_provider::resolve_A: Resolves an A record
#core_net_dns.cpp:domain_name_service_provider::on_udp_message: Handles a UDP message
#core_net_icmp.cpp:icmp_provider::icmp_provider: Constructor for the icmp provider class
#core_net_icmp.cpp:icmp_provider::~icmp_provider: Destructor for the icmp provider class
#core_net_icmp.cpp:icmp_provider::on_internet_protocol_received: Handles an IPv4 packet
#core_net_icmp.cpp:icmp_provider::send_echo_request: Sends an ICMP echo request
#core_net_icmp.cpp:icmp_provider::send_echo_reqest_and_wait: Sends an ICMP echo request and waits for an echo reply
#core_net_socket_manager.cpp:socket_manager_socket::socket_manager_socket: Constructor for the socket manager socket class
#core_net_socket_manager.cpp:socket_manager_socket::~socket_manager_socket: Destructor for the socket manager socket class
#core_net_socket_manager.cpp:socket_manager_socket::connect: Connects to a host
#core_net_socket_manager.cpp:socket_manager_socket::disconnect: Disconnects the socket
#core_net_socket_manager.cpp:socket_manager_socket::send: Sends a TCP message
#core_net_socket_manager.cpp:socket_manager_socket::receive: Receives a TCP message
#core_net_socket_manager.cpp:socket_manager_socket::on_tcp_message: Handles a TCP message
#core_net_socket_manager.cpp:socket_manager_socket::on_udp_message: Handles a UDP message
#core_net_socket_manager.cpp:socket_manager::socket_manager: Constructor for the socket manager class
#core_net_socket_manager.cpp:socket_manager::alloc_socket: Allocates a socket
#core_net_socket_manager.cpp:socket_manager::free_socket: Frees a socket
#core_net_socket_manager.cpp:socket_manager::register_socket: Registers a socket
#core_net_socket_manager.cpp:socket_manager::get_socket: Gets a socket
#core_net_udp.cpp:udp_handler::udp_handler: Constructor for the udp handler class
#core_net_udp.cpp:udp_handler::~udp_handler: Destructor for the udp handler class
#core_net_udp.cpp:udp_handler::on_udp_message: Handles a UDP message
#core_net_udp.cpp:udp_socket::udp_socket: Constructor for the udp socket class
#core_net_udp.cpp:udp_socket::~udp_socket: Destructor for the udp socket class
#core_net_udp.cpp:udp_socket::handle_udp_message: Handles a UDP message
#core_net_udp.cpp:udp_socket::send: Sends a UDP message
#core_net_udp.cpp:udp_socket::disconnect: Disconnects the socket
#core_net_udp.cpp:udp_provider::udp_provider: Constructor for the udp provider class
#core_net_udp.cpp:udp_provider::on_internet_protocol_received: Handles an IPv4 packet
#core_net_udp.cpp:udp_provider::connect: Connects to a host
#core_net_udp.cpp:udp_provider::listen: Listens for incoming connections
#core_net_udp.cpp:udp_provider::disconnect: Disconnects the socket
#core_net_udp.cpp:udp_provider::send: Sends a UDP message
#core_net_udp.cpp:udp_provider::bind: Binds the socket to a port

#core_syscall_sys_time.cpp:syscall::sys_time: Syscall to get the current time
#core_input_keyboard_input.cpp:keyboard_input_device::getstring: Gets a string from the keyboard
#core_input_keyboard_input.cpp:keyboard_input_device::getchar: Gets a character from the keyboard
#core_input_keyboard_input.cpp:input::keymap: Maps a keycode to a char
#core_input_keyboard_input.cpp:input::handle_special_keys_up: Handles special keys that are released
#core_input_keyboard_input.cpp:input::handle_special_keys_down: Handles special keys that are pressed
#core_input_mouse_input.cpp:mouse_input_device::update: Updates the mouse
#core_input_mouse_input.cpp:mouse_input_device::reset: Resets the mouse
#core_renderer_renderer.cpp:renderer::setup: Sets up the renderer
#core_renderer_render2d.cpp:render2d::render2d: Constructor for the render2d class
#core_renderer_render2d.cpp:render2d::put_pix: Puts a pixel on the screen
#core_renderer_render2d.cpp:render2d::load_bitmap: Loads a bitmap
#core_renderer_render2d.cpp:render2d::get_bitmap_info: Gets the bitmap info
#core_renderer_render2d.cpp:render2d::next_line: Goes to the next line

#core_apic_apic.cpp:apic::setup: Sets up the APIC
#core_apic_apic.cpp:apic::smp_spinup: Spins up the other processors
#core_acpi_acpi.cpp:acpi::find_table_xsdt: Finds a table in the XSDT
#core_acpi_acpi.cpp:acpi::find_table_rsdt: Finds a table in the RSDT
#core_acpi_acpi.cpp:acpi::find_table: Finds a table in the RSDT or XSDT
#core_acpi_acpi.cpp:acpi::early_setup: Sets up the ACPI
#core_acpi_acpi.cpp:acpi::init: Initializes the ACPI
#core_acpi_acpi.cpp:acpi::dsdt_init: Initializes the DSDT
#core_acpi_acpi.cpp:acpi::shutdown: Shuts down the ACPI
#core_acpi_acpi.cpp:acpi::reboot: Reboots the system
#core_acpi_madt.cpp:acpi::madt::parse_madt: Parses the MADT
#core_apic_apic_io.cpp:apic::lapic_write: Writes to the local APIC
#core_apic_apic_io.cpp:apic::lapic_read: Reads from the local APIC
#core_apic_apic_io.cpp:apic::lapic_wait: Waits for the local APIC
#core_apic_apic_io.cpp:apic::lapic_eoi: Sends an EOI to the local APIC
#core_apic_apic_io.cpp:apic::lapic_enable: Enables the local APIC
#core_apic_apic_io.cpp:apic::lapic_ipi: Sends an IPI to the local APIC
#core_apic_trampoline.cpp:apic::ap_trampoline_c: Trampoline code for the AP
#core_apic_trampoline.asm:ap_trampoline: 16 bit trampoline code for the AP
#core_apic_trampoline.asm:ap_trampoline_64: 64 bit trampoline code for the AP

#core_gdt.asm:load_gdt: Loads the GDT
#core_interrupts_interrupts.asm:load_idt: Loads the IDT

#filesystems_foxfs_main.cpp:fs_init: fs_init for the foxfs module
#filesystems_foxfs_main.cpp:device_init: device_init for the foxfs module
#filesystems_foxfs_main.cpp:init: init for the foxfs module
#filesystems_foxfs_foxfs_vfs.cpp:foxfs_mount::delete_dir: Deletes a directory
#filesystems_foxfs_foxfs_vfs.cpp:foxfs_mount::delete_: Deletes a file
#filesystems_foxfs_foxfs_vfs.cpp:foxfs_mount::dir_at: Gets the directory at a certain index
#filesystems_foxfs_foxfs_vfs.cpp:foxfs_mount::mkdir: Creates a directory
#filesystems_foxfs_foxfs_vfs.cpp:foxfs_mount::touch: Creates a file
#filesystems_foxfs_foxfs_vfs.cpp:foxfs_mount::write: Writes to a file
#filesystems_foxfs_foxfs_vfs.cpp:foxfs_mount::read: Reads from a file
#filesystems_foxfs_foxfs_vfs.cpp:foxfs_mount::close: Closes a file
#filesystems_foxfs_foxfs_vfs.cpp:foxfs_mount::open: Opens a file
#filesystems_foxfs_foxfs_vfs.cpp:foxfs_mount::~foxfs_mount: Destructor for the foxfs mount class
#filesystems_foxfs_foxfs_vfs.cpp:foxfs_mount::foxfs_mount: Constructor for the foxfs mount class
#filesystems_foxfs_foxfs_fs.cpp:fs::create_dirent: Creates a dirent
#filesystems_foxfs_foxfs_fs.cpp:fs::path_to_dirent: Converts a path to a dirent
#filesystems_foxfs_foxfs_fs.cpp:segment_path: Splits a path into segments
#filesystems_foxfs_foxfs_fs.cpp:fs::readdir: Reads a directory
#filesystems_foxfs_foxfs_fs.cpp:fs::write_dirent: Writes a directory entry
#filesystems_foxfs_foxfs_fs.cpp:fs::update_dirent_write: Updates a directory entry
#filesystems_foxfs_foxfs_fs.cpp:fs::write_dirent_data: Writes directory entry data
#filesystems_foxfs_foxfs_fs.cpp:fs::read_dirent: Reads a directory entry
#filesystems_foxfs_foxfs_fs.cpp:fs::update_dirent_read: Updates a directory entry
#filesystems_foxfs_foxfs_fs.cpp:fs::read_dirent_data: Reads directory entry data
#filesystems_foxfs_foxfs_fs.cpp:fs::create_data_block: Creates a data block
#filesystems_foxfs_foxfs_fs.cpp:fs::write_disk_block: Writes a block to the disk
#filesystems_foxfs_foxfs_fs.cpp:fs::read_disk_block: Reads a block from the disk

#filesystems_fat32_main.cpp:fs_init: fs_init for the fat32 module
#filesystems_fat32_main.cpp:device_init: device_init for the fat32 module
#filesystems_fat32_main.cpp:init: init for the fat32 module
#filesystems_fat32_fat32_vfs.cpp:fat32_mount::delete_dir: Deletes a directory
#filesystems_fat32_fat32_vfs.cpp:fat32_mount::delete_: Deletes a file
#filesystems_fat32_fat32_vfs.cpp:fat32_mount::dir_at: Gets the directory at a certain index
#filesystems_fat32_fat32_vfs.cpp:fat32_mount::mkdir: Creates a directory
#filesystems_fat32_fat32_vfs.cpp:fat32_mount::touch: Creates a file
#filesystems_fat32_fat32_vfs.cpp:fat32_mount::write: Writes to a file
#filesystems_fat32_fat32_vfs.cpp:fat32_mount::read: Reads from a file
#filesystems_fat32_fat32_vfs.cpp:fat32_mount::close: Closes a file
#filesystems_fat32_fat32_vfs.cpp:fat32_mount::open: Opens a file
#filesystems_fat32_fat32_vfs.cpp:fat32_mount::~fat32_mount: Destructor for the fat32 mount class
#filesystems_fat32_fat32_vfs.cpp:fat32_mount::fat32_mount: Constructor for the fat32 mount class
#filesystems_fat32_fat32_utils.cpp:fs::get_fattime: Gets the current time formatted for the FAT32 filesystem
#filesystems_fat32_fat32_utils.cpp:fs::is_fat32: Checks if a filesystem is FAT32

#filesystems_ext2_main.cpp:fs_init: fs_init for the ext2 module
#filesystems_ext2_main.cpp:device_init: device_init for the ext2 module
#filesystems_ext2_main.cpp:init: init for the ext2 module
#filesystems_ext2_ext2_vfs.cpp:ext2_mount::delete_: Deletes a file
#filesystems_ext2_ext2_vfs.cpp:ext2_mount::touch: Creates a file
#filesystems_ext2_ext2_vfs.cpp:ext2_mount::dir_at: Gets the directory at a certain index
#filesystems_ext2_ext2_vfs.cpp:ext2_mount::mkdir: Creates a directory
#filesystems_ext2_ext2_vfs.cpp:ext2_mount::write: Writes to a file
#filesystems_ext2_ext2_vfs.cpp:ext2_mount::read: Reads from a file
#filesystems_ext2_ext2_vfs.cpp:ext2_mount::close: Closes a file
#filesystems_ext2_ext2_vfs.cpp:ext2_mount::open: Opens a file
#filesystems_ext2_ext2_vfs.cpp:ext2_mount::~ext2_mount: Destructor for the ext2 mount class
#filesystems_ext2_ext2_vfs.cpp:ext2_mount::ext2_mount: Constructor for the ext2 mount class
#filesystems_ext2_ext2_utils.cpp:fs::is_ext2: Checks if a filesystem is EXT2
#filesystems_ext2_ext2_fs.cpp:fs::path_to_inode: Converts a path to an inode
#filesystems_ext2_ext2_fs.cpp:fs::readdir: Reads a directory
#filesystems_ext2_ext2_fs.cpp:fs::write_inode: Writes an inode to the disk
#filesystems_ext2_ext2_fs.cpp:fs::read_inode: Reads an inode from the disk
#filesystems_ext2_ext2_fs.cpp:fs::write_disk_blocks: Writes bldeno run -A tools/doc/main.tsocks to the disk
#filesystems_ext2_ext2_fs.cpp:fs::read_disk_blocks: Reads blocks from the disk
#filesystems_ext2_ext2_fs.cpp:clear_buffer: Clears a buffer
#filesystems_ext2_ext2_fs.cpp:fs::read_disk_block: Reads a block from the disk
#filesystems_ext2_ext2_fs.cpp:fs::write_disk_block: Writes a block to the disk

#features_smbios32_sys_sm32_get_cpu_info.cpp:syscall::sys_sm32_get_cpu_info: Syscall to get the CPU information from the smbios32 table
#features_smbios32_smbios32.cpp:smbios32::type_to_str: Converts a smbios32 table type to a string
#features_smbios32_smbios32.cpp:smbios32::get_string: Gets a string from the smbios32 table
#features_smbios32_smbios32.cpp:smbios32::find_smbios_structure: Finds a smbios32 structure in the smbios32 table
#features_smbios32_smbios32.cpp:smbios32::next: Calculates the next smbios32 structure in the smbios32 table
#features_smbios32_smbios32.cpp:smbios32::print_smbios_entry: Prints a smbios32 entry
#features_smbios32_sm32_dev_fs_file.cpp:sm32_dev_fs_file::get_name: Gets the name of the dev 
#features_smbios32_sm32_dev_fs_file.cpp:sm32_dev_fs_file::prepare_file: Prepares the dev fs file after it is opend
#features_smbios32_sm32_dev_fs_file.cpp:sm32_dev_fs_file::read: Reads from the dev fs file
#features_smbios32_sm32_dev_fs_file.cpp:sm32_dev_fs_file::sm32_dev_fs_file: Constructor for the dev fs file class
#features_smbios32_main.cpp:init: init function for the smbios32 module
#features_laihost_main.cpp:init: init function for the laihost module
#features_laihost_main.cpp:sci_interrupt_handler: System control interrupt handler
#features_laihost_main.cpp:get_sci_interrupt: Gets the system control interrupt vector
#features_laihost_laihost.cpp:memcmp: Compares two memory regions
#features_laihost_laihost.cpp:memset: Sets a memory region to a value
#features_laihost_laihost.cpp:memcpy: Copies a memory region
#features_laihost_laihost.cpp:laihost_scan: Function needed by the lai library. Scans the acpi tables for a certain table
#features_laihost_laihost.cpp:laihost_sync_wake: Function needed by the lai library.
#features_laihost_laihost.cpp:laihost_sync_wait: Function needed by the lai library.
#features_laihost_laihost.cpp:laihost_handle_amldebug: Function needed by the lai library. Handles the amldebug output.
#features_laihost_laihost.cpp:laihost_timer: Function needed by the lai library.
#features_laihost_laihost.cpp:laihost_sleep: Function needed by the lai library. Sleeps for a certain amount of time.
#features_laihost_laihost.cpp:laihost_pci_readd: Function needed by the lai library. Reads a dword from a pci device.
#features_laihost_laihost.cpp:laihost_pci_readw: Function needed by the lai library. Reads a word from a pci device.
#features_laihost_laihost.cpp:laihost_pci_readb: Function needed by the lai library. Reads a byte from a pci device.
#features_laihost_laihost.cpp:laihost_pci_writed: Function needed by the lai library. Writes a dword to a pci device.
#features_laihost_laihost.cpp:laihost_pci_writew: Function needed by the lai library. Writes a word to a pci device.
#features_laihost_laihost.cpp:laihost_pci_writeb: Function needed by the lai library. Writes a byte to a pci device.
#features_laihost_laihost.cpp:laihost_ind: Function needed by the lai library. Reads an double word value from an io port.
#features_laihost_laihost.cpp:laihost_inw: Function needed by the lai library. Reads a word from an io port.
#features_laihost_laihost.cpp:laihost_inb: Function needed by the lai library. Reads a byte from an io port.
#features_laihost_laihost.cpp:laihost_outd: Function needed by the lai library. Writes an double word value to an io port.
#features_laihost_laihost.cpp:laihost_outw: Function needed by the lai library. Writes a word to an io port.
#features_laihost_laihost.cpp:laihost_outb: Function needed by the lai library. Writes a byte to an io port.
#features_laihost_laihost.cpp:laihost_free: Function needed by the lai library. Frees a memory region.
#features_laihost_laihost.cpp:laihost_realloc: Function needed by the lai library. Reallocates a memory region.
#features_laihost_laihost.cpp:laihost_malloc: Function needed by the lai library. Allocates a memory region.
#features_laihost_laihost.cpp:laihost_panic: Function needed by the lai library. Panics the system.
#features_laihost_laihost.cpp:laihost_log: Function needed by the lai library. Logs a message.
#features_laihost_laihost.cpp:laihost_unmap: Function needed by the lai library. Unmaps a memory region.
#features_laihost_laihost.cpp:laihost_map: Function needed by the lai library. Maps a memory region.
#features_graphics_sys_fb_info.cpp:syscall::sys_fb_info: Syscall to get the framebuffer information.
#features_graphics_sys_copy_to_fb.cpp:syscall::sys_copy_to_fb: Syscall to copy a frame to the framebuffer.
#features_graphics_sys_copy_from_fb.cpp:syscall::sys_copy_from_fb: Syscall to copy a frame from the framebuffer.
#features_graphics_main.cpp:init: init function for the graphics module
#features_acpi_dump_main.cpp:init: init function for the acpi_dump module
#features_acpi_dump_main.cpp:enumerate_xsdt: Enumerates the xsdt table
#features_acpi_dump_main.cpp:enumerate_rsdt: Enumerates the rsdt table
#features_acpi_dump_main.cpp:register_sdt: Registers a sdt table
#features_acpi_dump_acpi_vfs.cpp:acpi_vfs::dir_at: Gets the directory entry at a certain index
#features_acpi_dump_acpi_vfs.cpp:acpi_vfs::read: Reads from the acpi vfs file
#features_acpi_dump_acpi_vfs.cpp:acpi_vfs::close: Closes the acpi vfs file
#features_acpi_dump_acpi_vfs.cpp:acpi_vfs::open: Opens the acpi vfs file
#features_acpi_dump_acpi_vfs.cpp:acpi_vfs::acpi_vfs: Constructor for the acpi vfs file class

#devices_pc_speaker_pc_speaker.cpp:pc_speaker_driver::pc_speaker_driver: Constructor for the pc speaker driver class
#devices_pc_speaker_pc_speaker.cpp:pc_speaker_driver::get_channel_count: Gets the number of channels of the pc speaker
#devices_pc_speaker_pc_speaker.cpp:pc_speaker_driver::activate: Activates the pc speaker driver
#devices_pc_speaker_pc_speaker.cpp:pc_speaker_driver::is_presend: Checks if the pc speaker is presend
#devices_pc_speaker_pc_speaker.cpp:pc_speaker_driver::get_name: Gets the name of the pc speaker driver
#devices_pc_speaker_pc_speaker.cpp:pc_speaker_driver::turn_off: Turns off the pc speaker
#devices_pc_speaker_pc_speaker.cpp:pc_speaker_driver::turn_on: Turns on the pc speaker
#devices_pc_speaker_pc_speaker.cpp:pc_speaker_driver::set_frequency: Sets the frequency of the pc speaker
#devices_pc_speaker_pc_speaker.cpp:pc_speaker_driver::note_to_frequency: Converts a note to a frequency
#devices_pc_speaker_main.cpp:init: init function for the pc speaker module
#devices_ata_ata.cpp:advanced_technology_attachment::advanced_technology_attachment: Constructor for the advanced technology attachment class
#devices_ata_ata.cpp:advanced_technology_attachment::is_presend: Checks if the advanced technology attachment is presend
#devices_ata_ata.cpp:advanced_technology_attachment::activate: Activates the advanced technology attachment
#devices_ata_ata.cpp:advanced_technology_attachment::read28: Reads from the advanced technology attachment
#devices_ata_ata.cpp:advanced_technology_attachment::write28: Writes to the advanced technology attachment
#devices_ata_ata.cpp:advanced_technology_attachment::flush: Flushes the advanced technology attachment
#devices_ata_ata.cpp:advanced_technology_attachment::read: Reads from the advanced technology attachment
#devices_ata_ata.cpp:advanced_technology_attachment::write: Writes to the advanced technology attachment
#devices_ata_ata.cpp:advanced_technology_attachment::get_name: Gets the name of the advanced technology attachment driver
#devices_ata_main.cpp:ata_pci_device_found: Function called when a pci device is found
#devices_ata_main.cpp:init: init function for the ata module
#devices_cmos_cmos.cpp:cmos_driver::cmos_read: Reads from the cmos
#devices_cmos_cmos.cpp:cmos_driver::cmos_convert: Converts from a cmos value
#devices_cmos_cmos.cpp:cmos_driver::cmos_command: Sends a cmos command to the cmos
#devices_cmos_cmos.cpp:cmos_driver::time: Gets the time from the cmos
#devices_cmos_main.cpp:device_init: device init function for the cmos module
#devices_ps2_keyboard_ps2_keyboard.cpp:ps2_keyboard::ps2_keyboard: Constructor for the ps2 keyboard driver class
#devices_ps2_keyboard_ps2_keyboard.cpp:ps2_keyboard::activate: Activates the ps2 keyboard driver
#devices_ps2_keyboard_ps2_keyboard.cpp:ps2_keyboard::is_presend: Checks if the ps2 keyboard is presend
#devices_ps2_keyboard_ps2_keyboard.cpp:ps2_keyboard::get_name: Gets the name of the ps2 keyboard driver
#devices_ps2_keyboard_ps2_keyboard.cpp:ps2_keyboard::getchar: Gets a character from the ps2 keyboard
#devices_ps2_keyboard_ps2_keyboard.cpp:ps2_keyboard::special_key_down: handler for special key down events
#devices_ps2_keyboard_ps2_keyboard.cpp:ps2_keyboard::special_key_up: handler for special key up events
#devices_ps2_keyboard_ps2_keyboard.cpp:ps2_keyboard::handle: interrupt handler for the ps2 keyboard
#devices_ps2_keyboard_ps2_keyboard.cpp:ps2_keyboard::write: Writes to the ps2 keyboard dev fs file
#devices_ps2_keyboard_ps2_keyboard.cpp:ps2_keyboard::read: Reads from the ps2 keyboard dev fs file
#devices_ps2_keyboard_main.cpp:device_init: device init function for the ps2 keyboard module
#devices_am79C973_main.cpp:am79C973_found: Function called when a am79C973 is found
#devices_am79C973_main.cpp:init: init function for the am79C973 module
#devices_am79C973_am79C973.cpp:am79C973_driver::~am79C973_driver: Destructor for the am79C973 driver class
#devices_am79C973_am79C973.cpp:am79C973_driver::activate: Activates the am79C973 driver
#devices_am79C973_am79C973.cpp:am79C973_driver::handle: interrupt handler for the am79C973 driver
#devices_am79C973_am79C973.cpp:am79C973_driver::send: Sends a packet
#devices_am79C973_am79C973.cpp:am79C973_driver::receive: Receives a packet
#devices_am79C973_am79C973.cpp:am79C973_driver::get_name: Gets the name of the am79C973 driver
#devices_am79C973_am79C973.cpp:am79C973_driver::get_mac: Gets the mac of the am79C973 driver
#devices_am79C973_am79C973.cpp:am79C973_driver::get_ip: Gets the ip of the am79C973 driver
#devices_am79C973_am79C973.cpp:am79C973_driver::set_ip: Sets the ip of the am79C973 driver
#devices_e1000_e1000.cpp:e1000_driver::~e1000_driver: Destructor for the e1000 driver class
#devices_e1000_e1000.cpp:e1000_driver::write_command: Writes a command to the e1000
#devices_e1000_e1000.cpp:e1000_driver::read_command: Reads a command from the e1000
#devices_e1000_e1000.cpp:e1000_driver::detect_eeprom: Detects the eeprom of the e1000
#devices_e1000_e1000.cpp:e1000_driver::read_eeprom: Reads from the eeprom of the e1000
#devices_e1000_e1000.cpp:e1000_driver::read_mac_address: Reads the mac address from the e1000
#devices_e1000_e1000.cpp:e1000_driver::rx_init: Initializes the receive buffer
#devices_e1000_e1000.cpp:e1000_driver::tx_init: Initializes the transmit buffer
#devices_e1000_e1000.cpp:e1000_driver::start_link: Starts the link
#devices_e1000_e1000.cpp:e1000_driver::activate: Activates the e1000 driver
#devices_e1000_e1000.cpp:e1000_driver::receive: Receives a packet
#devices_e1000_e1000.cpp:e1000_driver::send: Sends a packet
#devices_e1000_e1000.cpp:e1000_driver::handle: interrupt handler for the e1000 driver
#devices_e1000_e1000.cpp:e1000_driver::get_name: Gets the name of the e1000 driver
#devices_e1000_e1000.cpp:e1000_driver::get_mac: Gets the mac of the e1000 driver
#devices_e1000_e1000.cpp:e1000_driver::get_ip: Gets the ip of the e1000 driver
#devices_e1000_e1000.cpp:e1000_driver::set_ip: Sets the ip of the e1000 driver
#devices_e1000_main.cpp:e1000_found: Function called when a e1000 is found
#devices_e1000_main.cpp:init: init function for the e1000 module
#devices_ps2_mouse_ps2_mouse.cpp:ps2_mouse::ps2_mouse: Constructor for the ps2 mouse driver class
#devices_ps2_mouse_ps2_mouse.cpp:ps2_mouse::activate: Activates the ps2 mouse driver
#devices_ps2_mouse_ps2_mouse.cpp:ps2_mouse::is_presend: Checks if the ps2 mouse is presend
#devices_ps2_mouse_ps2_mouse.cpp:ps2_mouse::get_name: Gets the name of the ps2 mouse driver
#devices_ps2_mouse_ps2_mouse.cpp:ps2_mouse::handle: interrupt handler for the ps2 mouse driver
#devices_ps2_mouse_ps2_mouse.cpp:ps2_mouse::mouse_wait: Waits for the mouse to be ready
#devices_ps2_mouse_ps2_mouse.cpp:ps2_mouse::mouse_wait_input: Waits for the mouse to be ready for input
#devices_ps2_mouse_ps2_mouse.cpp:ps2_mouse::mouse_write: Writes to the mouse
#devices_ps2_mouse_ps2_mouse.cpp:ps2_mouse::mouse_read: Reads from mouse
#devices_ps2_mouse_main.cpp:device_init: device init function for the ps2 mouse module
#devices_rtl8139_rtl8139.cpp:rtl8139_driver::~rtl8139_driver: Destructor for the rtl8139 driver class
#devices_rtl8139_rtl8139.cpp:rtl8139_driver::send: Sends a packet
#devices_rtl8139_rtl8139.cpp:rtl8139_driver::get_mac: Gets the mac of the rtl8139 driver
#devices_rtl8139_rtl8139.cpp:rtl8139_driver::get_ip: Gets the ip of the rtl8139 driver
#devices_rtl8139_rtl8139.cpp:rtl8139_driver::set_ip: Sets the ip of the rtl8139 driver
#devices_rtl8139_rtl8139.cpp:rtl8139_driver::receive: Receives a packet
#devices_rtl8139_rtl8139.cpp:rtl8139_driver::handle: interrupt handler for the rtl8139 driver
#devices_rtl8139_rtl8139.cpp:rtl8139_driver::activate: Activates the rtl8139 driver
#devices_rtl8139_rtl8139.cpp:rtl8139_driver::get_name: Gets the name of the rtl8139 driver
#devices_rtl8139_main.cpp:rtl8139_found: Function called when a rtl8139 is found
#devices_rtl8139_main.cpp:init: init function for the rtl8139 module
#devices_ahci_ahci.cpp:ahci_driver::ahci_driver: Constructor for the ahci driver class
#devices_ahci_ahci.cpp:ahci_driver::get_name: Gets the name of the ahci driver
#devices_ahci_ahci.cpp:check_port_type: Checks the port type
#devices_ahci_ahci.cpp:ahci_driver::probe_ports: Probes the ports
#devices_ahci_ahci.cpp:ahci_driver::activate: Activates the ahci driver
#devices_ahci_ahci.cpp:ahci_driver::is_presend: Checks if the ahci is presend
#devices_ahci_ahci_port.cpp:ahci_port::configure: Configures the port
#devices_ahci_ahci_port.cpp:ahci_port::stop_command: Stops the command
#devices_ahci_ahci_port.cpp:ahci_port::start_command: Starts the command
#devices_ahci_ahci_port.cpp:ahci_port::read: Reads from the disk
#devices_ahci_ahci_port.cpp:ahci_port::write: Writes to the disk
#devices_ahci_main.cpp:ahci_pci_device_found: Function called when a ahci device is found
#devices_ahci_main.cpp:init: init function for the ahci module
#devices_xhci_xhci.cpp:xhci_timeout: Function to call a function with a timeout
#devices_xhci_xhci.cpp:xhci_driver::xhci_driver: Constructor for the xhci driver class
#devices_xhci_xhci.cpp:xhci_driver::handle: interrupt handler for the xhci driver
#devices_xhci_xhci.cpp:xhci_driver::activate: Activates the xhci driver
#devices_xhci_xhci.cpp:xhci_driver::get_name: Gets the name of the xhci driver
#devices_xhci_xhci.cpp:xhci_driver::intel_enable_ports: Enables the ports
#devices_xhci_xhci.cpp:xhci_driver::reset_controller: Resets the controller
#devices_xhci_main.cpp:xhci_found: Function called when a xhci device is found
#devices_xhci_main.cpp:init: init function for the xhci module

#exclude:filesystems_fat32_fatfs_ff.cpp
#exclude:filesystems_fat32_fatfs_ffsystem.cpp
#exclude:filesystems_fat32_fatfs_diskio.cpp
#exclude:filesystems_fat32_fatfs_ffunicode.cpp

#ignore-ext:h,psf,ts,bmp,md,flags,module,txt,html,json,build,c,yml,o,ld,elf
