#core_main.cpp:main: The main entry point of the kernel
#core_gdt.cpp:setup_gdt: Loads the Global Descriptor Table
#core_output_output.cpp:output_device::putstring: Prints a string to the output device
#core_output_output.cpp:output_device::putchar: Prints a character to the output device
#core_output_serial_port.cpp:serial_port::putstring: Prints a string to the serial port
#core_output_serial_port.cpp:serial_port::putchar: Prints a character to the serial port
#core_output_serial_port.cpp:serial_port::is_transmit_empty: Checks if the serial port is ready to transmit
#core_output_serial_port.cpp:serial_port::serial_port: Constructor for the serial port class
#core_syscall_sys_memory.cpp:syscall::sys_memory_free: Syscall to free a block of memory
#core_syscall_sys_memory.cpp:syscall::sys_memory_alloc: Syscall to allocate a block of memory
#core_syscall_sys_write.cpp:syscall::sys_write: Syscall to write to an file descriptor
#core_syscall_sys_socket_disconnect.cpp:syscall::sys_socket_disconnect: Syscall to disconnect a socket
#core_syscall_sys_mkdir.cpp:syscall::sys_mkdir: Syscall to create a directory
#core_core_syscall_sys_time.cpp:syscall::sys_time: Syscall to get the current unix time
#core_syscall_sys_memory_info.cpp:syscall::sys_memory_info: Syscall to get the memory information
#core_syscall_sys_sound_push_note.cpp:syscall::sys_sound_push_note: Syscall to push a note to the sound device queue
#core_syscall_syscall_handler.asm:syscall_interrupt_stub: The syscall interrupt stub
#core_syscall_sys_socket_recv.cpp:syscall::sys_socket_recv: Syscall to receive data from a socket
#core_syscall_sys_delete_dir.cpp:syscall::sys_delete_dir: Syscall to delete a directory
#core_syscall_sys_socket_send.cpp:syscall::sys_socket_send: Syscall to send data to a socket
#core_syscall_sys_ipc_send_message.cpp:syscall::sys_ipc_send_message: Syscall to send a message to an ipc handler
#core_syscall_sys_env.cpp:syscall::sys_env: Syscall to get the either process specific or global environment
#core_syscall_sys_socket_connect.cpp:syscall::sys_socket_connect: Syscall to connect to a socket
#core_syscall_sys_mouse_get_buttons.cpp:syscall::sys_mouse_get_buttons: Syscall to get the mouse buttons state
#core_syscall_sys_thread.cpp:syscall::sys_thread: Syscall to create a thread
#core_syscall_sys_get_file_size.cpp:syscall::sys_get_file_size: Syscall to get the size of a file
#core_syscall_sys_ipc_get_hid.cpp:syscall::sys_ipc_get_hid: Syscall to get the handler id of an ipc handler
#core_syscall_sys_exit.cpp:syscall::sys_exit: Syscall to exit the current process
#core_syscall_sys_sound_sync.cpp:syscall::sys_sound_sync: Syscall to wait for the sound device to finish playing the queue
#core_syscall_sys_touch.cpp:syscall::sys_touch: Syscall to create a new file
#core_syscall_sys_open.cpp:syscall::sys_open: Syscall to open a file
#core_syscall_sys_read.cpp:syscall::sys_read: Syscall to read from a file
#core_syscall_sys_delete.cpp:syscall::sys_delete: Syscall to delete a file
#core_syscall_sys_close.cpp:syscall::sys_close: Syscall to close a file
#core_syscall_sys_ipc_register.cpp:syscall::sys_ipc_register: Syscall to register an ipc handler
#core_syscall_sys_dns_resolve.cpp:syscall::sys_dns_resolve: Syscall to resolve a hostname to an ip address
#core_syscall_sys_mouse_get_pos.cpp:syscall::sys_mouse_get_pos: Syscall to get the mouse position
#core_syscall_sys_fs_at.cpp:syscall::sys_fs_at: Syscall to get the mounted filesystem
#core_syscall_syscall.cpp:syscall::setup: Sets up the syscall table
#core_syscall_syscall.cpp:test_syscall: Test syscall
#core_syscall_syscall.cpp:syscall::get_id_syscall: Syscall to get the id of an syscall
#core_syscall_sys_spawn.cpp:syscall::sys_spawn: Syscall to spawn a new process
#core_syscall_sys_mouse_reset.cpp:syscall::sys_mouse_reset: Syscall to reset the mouse
#core_syscall_sys_dir_at.cpp:syscall::sys_dir_at: Syscall to get the contents of a directory
#core_syscall_sys_ipc_unregister.cpp:syscall::sys_ipc_unregister: Syscall to unregister an ipc handler
#core_syscall_sys_sound_get_channel_count.cpp:syscall::sys_sound_get_channel_count: Syscall to get the number of sound channels available
#core_syscall_sys_delay.cpp:syscall::sys_delay: Syscall to delay the current process
#core_syscall_sys_icmp_echo_request.cpp:syscall::sys_icmp_echo_request: Syscall to send an icmp echo request
#core_syscall_sys_insmod.cpp:syscall::sys_insmod: Syscall to load a kernel module
#core_utils_argparse.cpp:setup_global_argparser: Sets up the global argparser
#core_utils_argparse.cpp:argparser::get_arg: Gets an argument from the argparser
#core_utils_argparse.cpp:argparser::is_arg: Checks if an argument is present in the argparser
#core_utils_argparse.cpp:argparser::argparser: Constructor for the argparser class
#core_utils_vsprintf.cpp:vsprintf: Prints a formatted string to a buffer
#core_utils_vsprintf.cpp:print_num: Prints a number to a buffer
#core_utils_lock.asm:atomic_spinlock: Waits for a spinlock to be unlocked
#core_utils_lock.asm:atomic_unlock: Unlocks a spinlock
#core_utils_lock.asm:atomic_lock: Locks a spinlock
#core_utils_mmio.cpp:MMIO::write64: Writes a 64 bit value to a mmio register
#core_utils_mmio.cpp:MMIO::write32: Writes a 32 bit value to a mmio register
#core_utils_mmio.cpp:MMIO::write16: Writes a 16 bit value to a mmio register
#core_utils_mmio.cpp:MMIO::write8: Writes a 8 bit value to a mmio register
#core_utils_mmio.cpp:MMIO::read64: Reads a 64 bit value from a mmio register
#core_utils_mmio.cpp:MMIO::read32: Reads a 32 bit value from a mmio register
#core_utils_mmio.cpp:MMIO::read16: Reads a 16 bit value from a mmio register
#core_utils_mmio.cpp:MMIO::read8: Reads a 8 bit value from a mmio register
#core_utils_assert.cpp:__assert_fail: If an assertion fails, this function is called
#core_utils_port.cpp:outl: Writes a 32 bit value to a port
#core_utils_port.cpp:inl: Reads a 32 bit value from a port
#core_utils_port.cpp:outw: Writes a 16 bit value to a port
#core_utils_port.cpp:inw: Reads a 16 bit value from a port
#core_utils_port.cpp:outb: Writes a 8 bit value to a port
#core_utils_port.cpp:inb: Reads a 8 bit value from a port
#core_utils_port.cpp:io_wait: Waits for a port to be ready
#core_utils_port.cpp:Port32Bit::Write: Writes a 32 bit value to a port
#core_utils_port.cpp:Port32Bit::Read: Reads a 32 bit value from a port
#core_utils_port.cpp:Port32Bit::~Port32Bit: Destructor for the class
#core_utils_port.cpp:Port32Bit::Port32Bit: Constructor for the class
#core_utils_port.cpp:Port16Bit::Write: Writes a 16 bit value to a port
#core_utils_port.cpp:Port16Bit::Read: Reads a 16 bit value from a port
#core_utils_port.cpp:Port16Bit::~Port16Bit: Destructor for the class
#core_utils_port.cpp:Port16Bit::Port16Bit: Constructor for the class
#core_utils_port.cpp:Port8Bit::Write: Writes a 8 bit value to a port
#core_utils_port.cpp:Port8Bit::Read: Reads a 8 bit value from a port
#core_utils_port.cpp:Port8Bit::~Port8Bit: Destructor for the class
#core_utils_port.cpp:Port8Bit::Port8Bit: Constructor for the class
#core_utils_abort.cpp:abortf: Causes a kernel panic
#core_utils_string.cpp:strcmp: Compares two strings
#core_utils_string.cpp:memcmp: Compares two memory regions
#core_utils_string.cpp:memset: Sets a memory region to a value
#core_utils_string.cpp:memcpy: Copies a memory region
#core_utils_string.cpp:sprintf: Prints a formatted string to a buffer
#core_utils_string.cpp:strcat: Concatenates two strings
#core_utils_string.cpp:strchr: Searches for a character in a string
#core_utils_string.cpp:strnlen: Gets the length of a string
#core_utils_string.cpp:strlen: Gets the length of a string
#core_utils_string.cpp:strcpy: Copies a string
#core_utils_log.cpp:printf: Prints a formatted string to the screen
#core_utils_log.cpp:debugf_intrnl: Internal function used for debugf
#core_utils_fxsr.asm:fxrstor_if_supported: Restores the fpu state if it is supported
#core_utils_fxsr.asm:fxsave_if_supported: Saves the fpu state if it is supported
#core_utils_unix_time.cpp:from_unix_time: Converts unix time to a struct
#core_utils_unix_time.cpp:to_unix_time: Converts a struct to unix time
#core_utils_ipc.cpp:ipc::init: Initializes the ipc system
#core_utils_ipc.cpp:ipc_manager::send_message: Sends a message to a process
#core_utils_ipc.cpp:ipc_manager::get_hid: Gets the handler id of an ipc handler
#core_utils_ipc.cpp:ipc_manager::unregister_callback: Unregisters an ipc handler
#core_utils_ipc.cpp:ipc_manager::register_callback: Registers an ipc handler
#core_utils_ipc.cpp:ipc_manager::ipc_manager: Constructor for the ipc manager class
#core_utils_cstr.cpp:num_to_string: Converts a number to a string
#core_elf_elf_loader.cpp:elf::load_elf: Loads an elf file
#core_elf_elf_loader.cpp:elf_apply_relocations: Applies relocations to an elf file
#core_elf_elf_resolver.cpp:elf::resolve_symbol: Resolves a symbol in the kernel and the loaded modules
#core_elf_elf_resolver.cpp:elf::setup: Sets up the elf resolver system
#core_elf_elf_resolver.cpp:elf_symbol_resolver::resolve: Resolves a symbol in an elf file
#core_elf_elf_resolver.cpp:elf_symbol_resolver::elf_symbol_resolver: Constructor for the elf symbol resolver class
#core_elf_kernel_module.cpp:elf::fs_init_all: Calls the fs_init function for all modules
#core_elf_kernel_module.cpp:elf::device_init_all: Calls the device_init function for all modules
#core_elf_kernel_module.cpp:elf::load_kernel_module: Loads a kernel module
#core_elf_kernel_module.cpp:kernel_module_render_status: Renders the status of loading process of a kernel module
#core_elf_function_patch.cpp:unpatch: Unpatches a function
#core_elf_function_patch.cpp:elf::patch: Patches a function
#core_renderer_boot_screen_renderer.cpp:boot_screen_renderer::handle: Handles the timer interrupt for the boot screen renderer
#core_renderer_boot_screen_renderer.cpp:boot_screen_renderer::set_progress: Sets the progress of the boot screen progress bar
#core_renderer_boot_screen_renderer.cpp:boot_screen_renderer::putstring: Does nothing
#core_renderer_boot_screen_renderer.cpp:boot_screen_renderer::putchar: Does nothing
#core_renderer_boot_screen_renderer.cpp:boot_screen_renderer::~boot_screen_renderer: Destructor for the class
#core_renderer_boot_screen_renderer.cpp:boot_screen_renderer::boot_screen_renderer: Constructor for the class
#core_renderer_font_renderer.cpp:font_renderer::write: Handler for the font_renderer dev fs file
#core_renderer_font_renderer.cpp:font_renderer::get_name: Gets the name of the dev fs file
#core_renderer_font_renderer.cpp:font_renderer::reset_color: Resets the color of the font renderer
#core_renderer_font_renderer.cpp:font_renderer::set_color: Sets the color of the font renderer
#core_renderer_font_renderer.cpp:font_renderer::clear_line: Clears the current line
#core_renderer_font_renderer.cpp:font_renderer::clear: Clears the screen
#core_renderer_font_renderer.cpp:font_renderer::putstring: Writes a string to the screen
#core_renderer_font_renderer.cpp:font_renderer::putchar: Writes a character to the screen
#core_renderer_font_renderer.cpp:font_renderer::font_renderer: Constructor for the class
#core_timer_timer.cpp:timer::setup: Sets up the timers in the system
#core_timer_timer.cpp:timer_device::sleep: Sleeps for a certain amount of time
#core_timer_pit.cpp:pit_timer::sleep: Sleeps for a certain amount of time
#core_timer_pit.cpp:pit_timer::handle: Handles the timer interrupt for the pit timer
#core_timer_pit.cpp:pit_timer::set_divisor: Sets the divisor of the pit timer
#core_timer_pit.cpp:pit_timer::pit_timer: Constructor for the pit timer class
#core_timer_hpet.cpp:hpet_timer::is_available: Checks if the hpet timer is available
#core_timer_hpet.cpp:hpet_timer::sleep: Sleeps for a certain amount of time
#core_timer_hpet.cpp:hpet_timer::hpet_timer: Constructor for the hpet timer class
#core_sound_sound.cpp:sound_device::get_channel_count: Gets the number of channels of the sound device
#core_sound_sound.cpp:sound_device::sync: Waits until the sound device queue is empty
#core_sound_sound.cpp:sound_device::push_note: Pushes a note to the sound device queue
#core_sound_sound.cpp:sound_device::sound_device: Constructor for the sound device class
#core_scheduler_scheduler.cpp:scheduler::get_cwd_self: Gets the current working directory of the current process
#core_scheduler_scheduler.cpp:scheduler::read_running_tasks: Get a list of all running tasks
#core_scheduler_scheduler.cpp:scheduler::set_cwd_self: Sets the current working directory of the current process
#core_scheduler_scheduler.cpp:scheduler::register_signal_handler_self: Registers a signal handler for the current process
#core_scheduler_scheduler.cpp:scheduler::handle_signal_all_tasks: Sends an signal to all tasks
#core_scheduler_scheduler.cpp:scheduler::handle_signal: Sends an signal to the current task
#core_scheduler_scheduler.cpp:scheduler::create_task: Creates a new task
#core_scheduler_scheduler.cpp:scheduler::kill_self: Kills the current task
#core_scheduler_scheduler.cpp:scheduler::start: Starts the scheduler
#core_scheduler_scheduler.cpp:scheduler::setup: Sets up the scheduler
#core_scheduler_scheduler.cpp:scheduler_interrupt: Handles the timer interrupt for the scheduler
#core_sanitizers_ubsan.cpp:__ubsan_handle_pointer_overflow: Sanitizer handler for a pointer overflow
#core_sanitizers_ubsan.cpp:__ubsan_handle_invalid_builtin: Sanitizer handler for an invalid builtin
#core_sanitizers_ubsan.cpp:__ubsan_handle_implicit_conversion: Sanitizer handler for an implicit conversion
#core_sanitizers_ubsan.cpp:__ubsan_handle_missing_return: Sanitizer handler for a missing return
#core_sanitizers_ubsan.cpp:__ubsan_handle_builtin_unreachable: Sanitizer handler for a builtin unreachable
#core_sanitizers_ubsan.cpp:__ubsan_handle_alignment_assumption: Sanitizer handler for an alignment assumption
#core_sanitizers_ubsan.cpp:__ubsan_handle_type_mismatch_v1: Sanitizer handler for a type mismatch
#core_sanitizers_ubsan.cpp:__ubsan_handle_out_of_bounds: Sanitizer handler for an out of bounds access
#core_sanitizers_ubsan.cpp:__ubsan_handle_divrem_overflow: Sanitizer handler for a division overflow
#core_sanitizers_ubsan.cpp:__ubsan_handle_mul_overflow: Sanitizer handler for a multiplication overflow
#core_sanitizers_ubsan.cpp:__ubsan_handle_negate_overflow: Sanitizer handler for a negation overflow
#core_sanitizers_ubsan.cpp:__ubsan_handle_sub_overflow: Sanitizer handler for a subtraction overflow
#core_sanitizers_ubsan.cpp:__ubsan_handle_add_overflow: Sanitizer handler for an addition overflow
#core_sanitizers_ubsan.cpp:__ubsan_handle_vla_bound_not_positive: Sanitizer handler for a vla bound not positive
#core_sanitizers_ubsan.cpp:__ubsan_handle_nullability_return_v1: Sanitizer handler for a nullability return
#core_sanitizers_ubsan.cpp:__ubsan_handle_nonnull_return_v1: Sanitizer handler for a nonnull return
#core_sanitizers_ubsan.cpp:__ubsan_handle_nullability_arg: Sanitizer handler for a nullability argument
#core_sanitizers_ubsan.cpp:__ubsan_handle_nonnull_arg: Sanitizer handler for a nonnull argument
#core_sanitizers_ubsan.cpp:__ubsan_handle_load_invalid_value: Sanitizer handler for a load invalid value


#filesystems_foxfs_main.cpp:fs_init: fs_init for the foxfs module
#filesystems_foxfs_main.cpp:device_init: device_init for the foxfs module
#filesystems_foxfs_main.cpp:init: init for the foxfs module
#filesystems_foxfs_foxfs_vfs.cpp:foxfs_mount::delete_dir: Deletes a directory
#filesystems_foxfs_foxfs_vfs.cpp:foxfs_mount::delete_: Deletes a file
#filesystems_foxfs_foxfs_vfs.cpp:foxfs_mount::dir_at: Gets the directory at a certain index
#filesystems_foxfs_foxfs_vfs.cpp:foxfs_mount::mkdir: Creates a directory
#filesystems_foxfs_foxfs_vfs.cpp:foxfs_mount::touch: Creates a file
#filesystems_foxfs_foxfs_vfs.cpp:foxfs_mount::write: Writes to a file
#filesystems_foxfs_foxfs_vfs.cpp:foxfs_mount::read: Reads from a file
#filesystems_foxfs_foxfs_vfs.cpp:foxfs_mount::close: Closes a file
#filesystems_foxfs_foxfs_vfs.cpp:foxfs_mount::open: Opens a file
#filesystems_foxfs_foxfs_vfs.cpp:foxfs_mount::~foxfs_mount: Destructor for the foxfs mount class
#filesystems_foxfs_foxfs_vfs.cpp:foxfs_mount::foxfs_mount: Constructor for the foxfs mount class
#filesystems_foxfs_foxfs_fs.cpp:fs::create_dirent: Creates a dirent
#filesystems_foxfs_foxfs_fs.cpp:fs::path_to_dirent: Converts a path to a dirent
#filesystems_foxfs_foxfs_fs.cpp:segment_path: Splits a path into segments
#filesystems_foxfs_foxfs_fs.cpp:fs::readdir: Reads a directory
#filesystems_foxfs_foxfs_fs.cpp:fs::write_dirent: Writes a directory entry
#filesystems_foxfs_foxfs_fs.cpp:fs::update_dirent_write: Updates a directory entry
#filesystems_foxfs_foxfs_fs.cpp:fs::write_dirent_data: Writes directory entry data
#filesystems_foxfs_foxfs_fs.cpp:fs::read_dirent: Reads a directory entry
#filesystems_foxfs_foxfs_fs.cpp:fs::update_dirent_read: Updates a directory entry
#filesystems_foxfs_foxfs_fs.cpp:fs::read_dirent_data: Reads directory entry data
#filesystems_foxfs_foxfs_fs.cpp:fs::create_data_block: Creates a data block
#filesystems_foxfs_foxfs_fs.cpp:fs::write_disk_block: Writes a block to the disk
#filesystems_foxfs_foxfs_fs.cpp:fs::read_disk_block: Reads a block from the disk

#filesystems_fat32_main.cpp:fs_init: fs_init for the fat32 module
#filesystems_fat32_main.cpp:device_init: device_init for the fat32 module
#filesystems_fat32_main.cpp:init: init for the fat32 module
#filesystems_fat32_fat32_vfs.cpp:fat32_mount::delete_dir: Deletes a directory
#filesystems_fat32_fat32_vfs.cpp:fat32_mount::delete_: Deletes a file
#filesystems_fat32_fat32_vfs.cpp:fat32_mount::dir_at: Gets the directory at a certain index
#filesystems_fat32_fat32_vfs.cpp:fat32_mount::mkdir: Creates a directory
#filesystems_fat32_fat32_vfs.cpp:fat32_mount::touch: Creates a file
#filesystems_fat32_fat32_vfs.cpp:fat32_mount::write: Writes to a file
#filesystems_fat32_fat32_vfs.cpp:fat32_mount::read: Reads from a file
#filesystems_fat32_fat32_vfs.cpp:fat32_mount::close: Closes a file
#filesystems_fat32_fat32_vfs.cpp:fat32_mount::open: Opens a file
#filesystems_fat32_fat32_vfs.cpp:fat32_mount::~fat32_mount: Destructor for the fat32 mount class
#filesystems_fat32_fat32_vfs.cpp:fat32_mount::fat32_mount: Constructor for the fat32 mount class
#filesystems_fat32_fat32_utils.cpp:fs::get_fattime: Gets the current time formatted for the FAT32 filesystem
#filesystems_fat32_fat32_utils.cpp:fs::is_fat32: Checks if a filesystem is FAT32

#filesystems_ext2_main.cpp:fs_init: fs_init for the ext2 module
#filesystems_ext2_main.cpp:device_init: device_init for the ext2 module
#filesystems_ext2_main.cpp:init: init for the ext2 module
#filesystems_ext2_ext2_vfs.cpp:ext2_mount::delete_: Deletes a file
#filesystems_ext2_ext2_vfs.cpp:ext2_mount::touch: Creates a file
#filesystems_ext2_ext2_vfs.cpp:ext2_mount::dir_at: Gets the directory at a certain index
#filesystems_ext2_ext2_vfs.cpp:ext2_mount::mkdir: Creates a directory
#filesystems_ext2_ext2_vfs.cpp:ext2_mount::write: Writes to a file
#filesystems_ext2_ext2_vfs.cpp:ext2_mount::read: Reads from a file
#filesystems_ext2_ext2_vfs.cpp:ext2_mount::close: Closes a file
#filesystems_ext2_ext2_vfs.cpp:ext2_mount::open: Opens a file
#filesystems_ext2_ext2_vfs.cpp:ext2_mount::~ext2_mount: Destructor for the ext2 mount class
#filesystems_ext2_ext2_vfs.cpp:ext2_mount::ext2_mount: Constructor for the ext2 mount class
#filesystems_ext2_ext2_utils.cpp:fs::is_ext2: Checks if a filesystem is EXT2
#filesystems_ext2_ext2_fs.cpp:fs::path_to_inode: Converts a path to an inode
#filesystems_ext2_ext2_fs.cpp:fs::readdir: Reads a directory
#filesystems_ext2_ext2_fs.cpp:fs::write_inode: Writes an inode to the disk
#filesystems_ext2_ext2_fs.cpp:fs::read_inode: Reads an inode from the disk
#filesystems_ext2_ext2_fs.cpp:fs::write_disk_blocks: Writes blocks to the disk
#filesystems_ext2_ext2_fs.cpp:fs::read_disk_blocks: Reads blocks from the disk
#filesystems_ext2_ext2_fs.cpp:clear_buffer: Clears a buffer
#filesystems_ext2_ext2_fs.cpp:fs::read_disk_block: Reads a block from the disk
#filesystems_ext2_ext2_fs.cpp:fs::write_disk_block: Writes a block to the disk

#features_smbios32_sys_sm32_get_cpu_info.cpp:syscall::sys_sm32_get_cpu_info: Syscall to get the CPU information from the smbios32 table
#features_smbios32_smbios32.cpp:smbios32::type_to_str: Converts a smbios32 table type to a string
#features_smbios32_smbios32.cpp:smbios32::get_string: Gets a string from the smbios32 table
#features_smbios32_smbios32.cpp:smbios32::find_smbios_structure: Finds a smbios32 structure in the smbios32 table
#features_smbios32_smbios32.cpp:smbios32::next: Calculates the next smbios32 structure in the smbios32 table
#features_smbios32_smbios32.cpp:smbios32::print_smbios_entry: Prints a smbios32 entry
#features_smbios32_sm32_dev_fs_file.cpp:sm32_dev_fs_file::get_name: Gets the name of the dev 
#features_smbios32_sm32_dev_fs_file.cpp:sm32_dev_fs_file::prepare_file: Prepares the dev fs file after it is opend
#features_smbios32_sm32_dev_fs_file.cpp:sm32_dev_fs_file::read: Reads from the dev fs file
#features_smbios32_sm32_dev_fs_file.cpp:sm32_dev_fs_file::sm32_dev_fs_file: Constructor for the dev fs file class
#features_smbios32_main.cpp:init: init function for the smbios32 module
#features_laihost_main.cpp:init: init function for the laihost module
#features_laihost_main.cpp:sci_interrupt_handler: System control interrupt handler
#features_laihost_main.cpp:get_sci_interrupt: Gets the system control interrupt vector
#features_laihost_laihost.cpp:memcmp: Compares two memory regions
#features_laihost_laihost.cpp:memset: Sets a memory region to a value
#features_laihost_laihost.cpp:memcpy: Copies a memory region
#features_laihost_laihost.cpp:laihost_scan: Function needed by the lai library. Scans the acpi tables for a certain table
#features_laihost_laihost.cpp:laihost_sync_wake: Function needed by the lai library.
#features_laihost_laihost.cpp:laihost_sync_wait: Function needed by the lai library.
#features_laihost_laihost.cpp:laihost_handle_amldebug: Function needed by the lai library. Handles the amldebug output.
#features_laihost_laihost.cpp:laihost_timer: Function needed by the lai library.
#features_laihost_laihost.cpp:laihost_sleep: Function needed by the lai library. Sleeps for a certain amount of time.
#features_laihost_laihost.cpp:laihost_pci_readd: Function needed by the lai library. Reads a dword from a pci device.
#features_laihost_laihost.cpp:laihost_pci_readw: Function needed by the lai library. Reads a word from a pci device.
#features_laihost_laihost.cpp:laihost_pci_readb: Function needed by the lai library. Reads a byte from a pci device.
#features_laihost_laihost.cpp:laihost_pci_writed: Function needed by the lai library. Writes a dword to a pci device.
#features_laihost_laihost.cpp:laihost_pci_writew: Function needed by the lai library. Writes a word to a pci device.
#features_laihost_laihost.cpp:laihost_pci_writeb: Function needed by the lai library. Writes a byte to a pci device.
#features_laihost_laihost.cpp:laihost_ind: Function needed by the lai library. Reads an double word value from an io port.
#features_laihost_laihost.cpp:laihost_inw: Function needed by the lai library. Reads a word from an io port.
#features_laihost_laihost.cpp:laihost_inb: Function needed by the lai library. Reads a byte from an io port.
#features_laihost_laihost.cpp:laihost_outd: Function needed by the lai library. Writes an double word value to an io port.
#features_laihost_laihost.cpp:laihost_outw: Function needed by the lai library. Writes a word to an io port.
#features_laihost_laihost.cpp:laihost_outb: Function needed by the lai library. Writes a byte to an io port.
#features_laihost_laihost.cpp:laihost_free: Function needed by the lai library. Frees a memory region.
#features_laihost_laihost.cpp:laihost_realloc: Function needed by the lai library. Reallocates a memory region.
#features_laihost_laihost.cpp:laihost_malloc: Function needed by the lai library. Allocates a memory region.
#features_laihost_laihost.cpp:laihost_panic: Function needed by the lai library. Panics the system.
#features_laihost_laihost.cpp:laihost_log: Function needed by the lai library. Logs a message.
#features_laihost_laihost.cpp:laihost_unmap: Function needed by the lai library. Unmaps a memory region.
#features_laihost_laihost.cpp:laihost_map: Function needed by the lai library. Maps a memory region.
#features_graphics_sys_fb_info.cpp:syscall::sys_fb_info: Syscall to get the framebuffer information.
#features_graphics_sys_copy_to_fb.cpp:syscall::sys_copy_to_fb: Syscall to copy a frame to the framebuffer.
#features_graphics_sys_copy_from_fb.cpp:syscall::sys_copy_from_fb: Syscall to copy a frame from the framebuffer.
#features_graphics_main.cpp:init: init function for the graphics module
#features_acpi_dump_main.cpp:init: init function for the acpi_dump module
#features_acpi_dump_main.cpp:enumerate_xsdt: Enumerates the xsdt table
#features_acpi_dump_main.cpp:enumerate_rsdt: Enumerates the rsdt table
#features_acpi_dump_main.cpp:register_sdt: Registers a sdt table
#features_acpi_dump_acpi_vfs.cpp:acpi_vfs::dir_at: Gets the directory entry at a certain index
#features_acpi_dump_acpi_vfs.cpp:acpi_vfs::read: Reads from the acpi vfs file
#features_acpi_dump_acpi_vfs.cpp:acpi_vfs::close: Closes the acpi vfs file
#features_acpi_dump_acpi_vfs.cpp:acpi_vfs::open: Opens the acpi vfs file
#features_acpi_dump_acpi_vfs.cpp:acpi_vfs::acpi_vfs: Constructor for the acpi vfs file class

#exclude:filesystems_fat32_fatfs_ff.cpp
#exclude:filesystems_fat32_fatfs_ffsystem.cpp
#exclude:filesystems_fat32_fatfs_diskio.cpp
#exclude:filesystems_fat32_fatfs_ffunicode.cpp

#ignore-ext:h,psf,ts,bmp,md,flags,module,txt,html,json,build,c,yml
